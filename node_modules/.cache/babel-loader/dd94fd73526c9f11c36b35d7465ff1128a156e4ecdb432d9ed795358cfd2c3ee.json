{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/sample.css';\nimport Footer from '../components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Play() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: []\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: []\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: []\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: []\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: []\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000);\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault();\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...board];\n    const newShipPositions = getShipPositions(index, ship.size);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips([...ships]);\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setBoard(newBoard);\n  };\n\n  // Get ship positions (horizontal placement)\n  const getShipPositions = (startIndex, size) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      const newIndex = startIndex + i;\n      if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n        positions.push(newIndex);\n      } else {\n        return null; // Prevent wrapping around\n      }\n    }\n    return positions;\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || enemyBoard[index] !== null) return;\n    let newBoard = [...enemyBoard];\n    let hit = Math.random() > 0.5 ? \"H\" : \"M\";\n    newBoard[index] = hit;\n    setEnemyBoard(newBoard);\n\n    // Check for game over\n    if (!newBoard.includes(null)) {\n      setGameOver(true);\n    }\n  };\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips(ships.map(ship => ({\n      ...ship,\n      placed: false,\n      positions: []\n    })));\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Sample Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", timer, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), ships.map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ship\",\n          draggable: !ship.placed,\n          onDragStart: e => handleDragStart(e, ship),\n          onDragEnd: handleDragEnd,\n          children: ship.id\n        }, ship.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell ? 'ship' : ''}`,\n          onDrop: e => handleDrop(e, index),\n          onDragOver: e => e.preventDefault(),\n          children: cell ? \"S\" : \"\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: enemyBoard.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n          onClick: () => attackEnemy(index),\n          children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"restart-button\",\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(Play, \"1VLWmaCE+DAvvyMC/cKeP4Oq2dg=\");\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","jsxDEV","_jsxDEV","Play","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","some","pos","alert","forEach","startIndex","i","newIndex","Math","floor","push","attackEnemy","hit","random","includes","resetGame","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","draggable","onDragStart","onDragEnd","cell","onDrop","onDragOver","onClick","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/sample.css';\nimport Footer from '../components/Footer';\n\nfunction Play() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [] },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [] },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [] },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [] },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [] },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000);\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault();\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...board];\n        const newShipPositions = getShipPositions(index, ship.size);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips([...ships]);\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setBoard(newBoard);\n    };\n\n    // Get ship positions (horizontal placement)\n    const getShipPositions = (startIndex, size) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            const newIndex = startIndex + i;\n            if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                positions.push(newIndex);\n            } else {\n                return null; // Prevent wrapping around\n            }\n        }\n        return positions;\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || enemyBoard[index] !== null) return;\n\n        let newBoard = [...enemyBoard];\n        let hit = Math.random() > 0.5 ? \"H\" : \"M\";\n        newBoard[index] = hit;\n        setEnemyBoard(newBoard);\n\n        // Check for game over\n        if (!newBoard.includes(null)) {\n            setGameOver(true);\n        }\n    };\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips(ships.map(ship => ({ ...ship, placed: false, positions: [] })));\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Sample Game</h1>\n                </header>\n\n                {/* Timer */}\n                <p>Time: {timer} seconds</p>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.map((ship) => (\n                        <div\n                            key={ship.id}\n                            className=\"ship\"\n                            draggable={!ship.placed}\n                            onDragStart={(e) => handleDragStart(e, ship)}\n                            onDragEnd={handleDragEnd}\n                        >\n                            {ship.id}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Player Board */}\n                <h2>Your Board</h2>\n                <div className=\"grid-container\">\n                    {board.map((cell, index) => (\n                        <div\n                            key={index}\n                            className={`cell ${cell ? 'ship' : ''}`}\n                            onDrop={(e) => handleDrop(e, index)}\n                            onDragOver={(e) => e.preventDefault()}\n                        >\n                            {cell ? \"S\" : \"\"}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"grid-container\">\n                    {enemyBoard.map((cell, index) => (\n                        <div\n                            key={index}\n                            className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                            onClick={() => attackEnemy(index)}\n                        >\n                            {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Reset Button */}\n                <button onClick={resetGame} className=\"restart-button\">\n                    Reset Game\n                </button>\n\n                {/* Game Over Notification */}\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Play;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}