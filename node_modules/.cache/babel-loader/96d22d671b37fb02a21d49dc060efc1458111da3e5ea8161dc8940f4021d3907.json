{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n\n  // Initialize enemy board with random ships placement\n  useEffect(() => {\n    if (enemyBoard.every(cell => cell === null)) {\n      // Ensure enemy board is empty before setting\n      setEnemyBoard(prev => {\n        const newEnemyBoard = Array(100).fill(null);\n        const newShips = [...ships];\n\n        // Function to get ship positions (check valid placement)\n        const getShipPositions = (startIndex, size, isHorizontal) => {\n          const positions = [];\n          for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n              newIndex = startIndex + i;\n              if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                positions.push(newIndex);\n              } else {\n                return null; // Prevent wrapping around\n              }\n            } else {\n              newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n              if (newIndex < 100) {\n                positions.push(newIndex);\n              } else {\n                return null; // Prevent wrapping around\n              }\n            }\n          }\n          return positions;\n        };\n\n        // Random ship placement logic\n        const tryPlaceShip = ship => {\n          let placed = false;\n          let positions;\n          while (!placed) {\n            const randomIndex = Math.floor(Math.random() * 100);\n            const randomOrientation = Math.random() < 0.5; // Randomly decide if the ship is horizontal or vertical\n            positions = getShipPositions(randomIndex, ship.size, randomOrientation);\n            if (positions && !positions.some(pos => newEnemyBoard[pos] !== null)) {\n              // If all positions are valid (no overlap), place the ship\n              positions.forEach(pos => {\n                newEnemyBoard[pos] = ship.id;\n              });\n              placed = true;\n            }\n          }\n          return {\n            ...ship,\n            placed: true,\n            positions\n          };\n        };\n\n        // Place all ships\n        newShips.forEach((ship, index) => {\n          const updatedShip = tryPlaceShip(ship);\n          newShips[index] = updatedShip;\n        });\n        setShips(newShips);\n        return newEnemyBoard;\n      });\n    }\n  }, [enemyBoard, ships]);\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips(ships.map(ship => ({\n      ...ship,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    })));\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"restart-button\",\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 33\n            }, this), board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Get ship name class if a ship is placed\n              const shipClass = cell ? getShipClass(cell) : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${shipClass}` // Apply the ship class here\n                ,\n                children: cell ? \"S\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n              children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 37\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"KUdkLJBsimYB10J0TcUrPPE4P0o=\");\n_c = Normal;\nexport default Normal;\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","every","cell","prev","newEnemyBoard","newShips","getShipPositions","startIndex","i","newIndex","Math","floor","push","tryPlaceShip","ship","randomIndex","random","randomOrientation","some","pos","forEach","index","updatedShip","resetGame","map","getShipClass","shipId","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","filter","draggable","disabled","label","from","length","_","rowIndex","slice","shipClass","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    // Initialize enemy board with random ships placement\n    useEffect(() => {\n        if (enemyBoard.every(cell => cell === null)) { // Ensure enemy board is empty before setting\n            setEnemyBoard(prev => {\n                const newEnemyBoard = Array(100).fill(null);\n                const newShips = [...ships];\n\n                // Function to get ship positions (check valid placement)\n                const getShipPositions = (startIndex, size, isHorizontal) => {\n                    const positions = [];\n                    for (let i = 0; i < size; i++) {\n                        let newIndex;\n                        if (isHorizontal) {\n                            newIndex = startIndex + i;\n                            if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                                positions.push(newIndex);\n                            } else {\n                                return null; // Prevent wrapping around\n                            }\n                        } else {\n                            newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                            if (newIndex < 100) {\n                                positions.push(newIndex);\n                            } else {\n                                return null; // Prevent wrapping around\n                            }\n                        }\n                    }\n                    return positions;\n                };\n\n                // Random ship placement logic\n                const tryPlaceShip = (ship) => {\n                    let placed = false;\n                    let positions;\n                    while (!placed) {\n                        const randomIndex = Math.floor(Math.random() * 100);\n                        const randomOrientation = Math.random() < 0.5; // Randomly decide if the ship is horizontal or vertical\n                        positions = getShipPositions(randomIndex, ship.size, randomOrientation);\n\n                        if (positions && !positions.some(pos => newEnemyBoard[pos] !== null)) {\n                            // If all positions are valid (no overlap), place the ship\n                            positions.forEach(pos => {\n                                newEnemyBoard[pos] = ship.id;\n                            });\n                            placed = true;\n                        }\n                    }\n\n                    return { ...ship, placed: true, positions };\n                };\n\n                // Place all ships\n                newShips.forEach((ship, index) => {\n                    const updatedShip = tryPlaceShip(ship);\n                    newShips[index] = updatedShip;\n                });\n\n                setShips(newShips);\n                return newEnemyBoard;\n            });\n        }\n    }, [enemyBoard, ships]);\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips(ships.map(ship => ({ ...ship, placed: false, positions: [], isHorizontal: true })));\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button onClick={resetGame} className=\"restart-button\">\n                        Reset Game\n                    </button>\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    // Get ship name class if a ship is placed\n                                    const shipClass = cell ? getShipClass(cell) : '';\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${shipClass}`} // Apply the ship class here\n                                        >\n                                            {cell ? \"S\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => (\n                                    <div\n                                        key={index}\n                                        className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                    >\n                                        {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Game Over Notification */}\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Normal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}