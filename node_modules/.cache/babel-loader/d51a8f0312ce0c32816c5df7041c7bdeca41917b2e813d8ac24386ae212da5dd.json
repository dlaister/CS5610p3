{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nconst BOARD_SIZE = 10;\nconst SHIPS = [{\n  id: 'Carrier 5x1',\n  size: 5\n}, {\n  id: 'Battleship 4x1',\n  size: 4\n}, {\n  id: 'Cruiser 3x1',\n  size: 3\n}, {\n  id: 'Submarine 3x1',\n  size: 3\n}, {\n  id: 'Destroyer 2x1',\n  size: 2\n}];\n\n// Function to generate a random board with specific ships\nconst generateRandomBoard = () => {\n  const board = Array(100).fill(null); // Empty board\n  const placedShips = [];\n\n  // Function to check if a ship can be placed at a certain position\n  const canPlaceShip = positions => {\n    return positions.every(pos => board[pos] === null); // Check if all positions are empty\n  };\n\n  // Function to place a ship randomly\n  const placeShip = ship => {\n    let validPlacement = false;\n    let positions = [];\n\n    // Try placing the ship until a valid placement is found\n    while (!validPlacement) {\n      const isHorizontal = Math.random() < 0.5; // Randomly choose orientation\n      const startIndex = Math.floor(Math.random() * 100); // Random starting index\n\n      positions = getShipPositions(startIndex, ship.size, isHorizontal);\n      if (positions && canPlaceShip(positions)) {\n        validPlacement = true;\n        positions.forEach(pos => board[pos] = ship.id); // Place the ship\n        placedShips.push({\n          id: ship.id,\n          positions\n        });\n      }\n    }\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        // Ensure horizontal placement doesn't overflow the row\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around rows\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent going out of bounds\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Place all ships randomly (based on predefined SHIPS array)\n  SHIPS.forEach(ship => {\n    placeShip(ship); // Place each ship in a random position\n  });\n  return board;\n};\n\n// Main component\nconst SetEnemyBoard = ({\n  setEnemyBoard\n}) => {\n  _s();\n  useEffect(() => {\n    const randomBoard = generateRandomBoard();\n    setEnemyBoard(randomBoard); // Set the randomly generated board\n  }, [setEnemyBoard]);\n  return null; // This component doesn't render anything\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","BOARD_SIZE","SHIPS","id","size","generateRandomBoard","board","Array","fill","placedShips","canPlaceShip","positions","every","pos","placeShip","ship","validPlacement","isHorizontal","Math","random","startIndex","floor","getShipPositions","forEach","push","i","newIndex","SetEnemyBoard","setEnemyBoard","_s","randomBoard","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import { useEffect } from 'react';\n\nconst BOARD_SIZE = 10;\nconst SHIPS = [\n    { id: 'Carrier 5x1', size: 5 },\n    { id: 'Battleship 4x1', size: 4 },\n    { id: 'Cruiser 3x1', size: 3 },\n    { id: 'Submarine 3x1', size: 3 },\n    { id: 'Destroyer 2x1', size: 2 },\n];\n\n// Function to generate a random board with specific ships\nconst generateRandomBoard = () => {\n    const board = Array(100).fill(null); // Empty board\n    const placedShips = [];\n\n    // Function to check if a ship can be placed at a certain position\n    const canPlaceShip = (positions) => {\n        return positions.every(pos => board[pos] === null); // Check if all positions are empty\n    };\n\n    // Function to place a ship randomly\n    const placeShip = (ship) => {\n        let validPlacement = false;\n        let positions = [];\n\n        // Try placing the ship until a valid placement is found\n        while (!validPlacement) {\n            const isHorizontal = Math.random() < 0.5; // Randomly choose orientation\n            const startIndex = Math.floor(Math.random() * 100); // Random starting index\n\n            positions = getShipPositions(startIndex, ship.size, isHorizontal);\n\n            if (positions && canPlaceShip(positions)) {\n                validPlacement = true;\n                positions.forEach(pos => board[pos] = ship.id); // Place the ship\n                placedShips.push({ id: ship.id, positions });\n            }\n        }\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                // Ensure horizontal placement doesn't overflow the row\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around rows\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent going out of bounds\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Place all ships randomly (based on predefined SHIPS array)\n    SHIPS.forEach((ship) => {\n        placeShip(ship); // Place each ship in a random position\n    });\n\n    return board;\n};\n\n// Main component\nconst SetEnemyBoard = ({ setEnemyBoard }) => {\n    useEffect(() => {\n        const randomBoard = generateRandomBoard();\n        setEnemyBoard(randomBoard); // Set the randomly generated board\n    }, [setEnemyBoard]);\n\n    return null; // This component doesn't render anything\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}