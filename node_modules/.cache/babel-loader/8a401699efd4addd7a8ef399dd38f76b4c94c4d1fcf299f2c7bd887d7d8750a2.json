{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/play.css';\nimport Footer from '../components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Play() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000);\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Function to get a CSS-friendly class name from ship ID\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault();\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n\n  // Restore opacity after dragging\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1';\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...board];\n    const newShipPositions = getShipPositions(index, ship.size, ship.orientation);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips([...ships]);\n\n    // Store only the ship ID to match the CSS class later\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation\n  const getShipPositions = (startIndex, size, orientation) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex = orientation === \"horizontal\" ? startIndex + i : startIndex + i * BOARD_SIZE;\n\n      // Prevent wrapping around horizontally\n      if (orientation === \"horizontal\" && Math.floor(newIndex / BOARD_SIZE) !== Math.floor(startIndex / BOARD_SIZE)) {\n        return null;\n      }\n\n      // Prevent wrapping around vertically\n      if (orientation === \"vertical\" && newIndex >= BOARD_SIZE * BOARD_SIZE) {\n        return null;\n      }\n      positions.push(newIndex);\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || enemyBoard[index] !== null) return;\n    let newBoard = [...enemyBoard];\n    let hit = Math.random() > 0.5 ? \"H\" : \"M\";\n    newBoard[index] = hit;\n    setEnemyBoard(newBoard);\n\n    // Check for game over\n    if (!newBoard.includes(null)) {\n      setGameOver(true);\n    }\n  };\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips(ships.map(ship => ({\n      ...ship,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    })));\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n  };\n\n  // const getShipClass = (shipId) => {\n  //     return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Sample Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", timer, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell ? 'ship' : ''}`,\n          onDrop: e => handleDrop(e, index),\n          onDragOver: e => e.preventDefault(),\n          children: cell ? \"S\" : \"\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: enemyBoard.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n          onClick: () => attackEnemy(index),\n          children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"restart-button\",\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n_s(Play, \"5s2RI27DzyPLulCCpqP/iYbFWPA=\");\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","jsxDEV","_jsxDEV","Play","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","getShipClass","shipId","split","toLowerCase","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","orientation","some","pos","alert","forEach","startIndex","i","newIndex","Math","floor","push","handleRotate","prevShips","map","attackEnemy","hit","random","includes","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","draggable","onDragStart","onDragEnd","onClick","disabled","cell","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/play.css';\nimport Footer from '../components/Footer';\n\nfunction Play() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000);\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Function to get a CSS-friendly class name from ship ID\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n// Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault();\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n// Restore opacity after dragging\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1';\n    };\n\n// Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...board];\n        const newShipPositions = getShipPositions(index, ship.size, ship.orientation);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips([...ships]);\n\n        // Store only the ship ID to match the CSS class later\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setBoard(newBoard);\n    };\n\n// Get ship positions based on orientation\n    const getShipPositions = (startIndex, size, orientation) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex = orientation === \"horizontal\" ? startIndex + i : startIndex + i * BOARD_SIZE;\n\n            // Prevent wrapping around horizontally\n            if (orientation === \"horizontal\" && Math.floor(newIndex / BOARD_SIZE) !== Math.floor(startIndex / BOARD_SIZE)) {\n                return null;\n            }\n\n            // Prevent wrapping around vertically\n            if (orientation === \"vertical\" && newIndex >= BOARD_SIZE * BOARD_SIZE) {\n                return null;\n            }\n\n            positions.push(newIndex);\n        }\n        return positions;\n    };\n\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return { ...ship, isHorizontal: !ship.isHorizontal };\n            }\n            return ship;\n        }));\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || enemyBoard[index] !== null) return;\n\n        let newBoard = [...enemyBoard];\n        let hit = Math.random() > 0.5 ? \"H\" : \"M\";\n        newBoard[index] = hit;\n        setEnemyBoard(newBoard);\n\n        // Check for game over\n        if (!newBoard.includes(null)) {\n            setGameOver(true);\n        }\n    };\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips(ships.map(ship => ({ ...ship, placed: false, positions: [], isHorizontal: true })));\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n    };\n\n    // const getShipClass = (shipId) => {\n    //     return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    // };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Sample Game</h1>\n                </header>\n\n                {/* Timer */}\n                <p>Time: {timer} seconds</p>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.filter(ship => !ship.placed).map((ship) => (\n                        <div\n                            key={ship.id}\n                            className={`ship-container ${getShipClass(ship.id)}`}\n                        >\n                            {/* Ship name */}\n                            <div\n                                className=\"ship\"\n                                draggable={!ship.placed}\n                                onDragStart={(e) => handleDragStart(e, ship)}\n                                onDragEnd={handleDragEnd}\n                            >\n                                {ship.id}\n                            </div>\n                            {/* Rotate button */}\n                            <button\n                                onClick={() => handleRotate(ship.id)}\n                                disabled={ship.placed}\n                                className=\"ship-button\"\n                            >\n                                {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                            </button>\n                        </div>\n                    ))}\n                </div>\n\n\n                {/* Player Board */}\n                <h2>Your Board</h2>\n                <div className=\"grid-container\">\n                    {board.map((cell, index) => (\n                        <div\n                            key={index}\n                            className={`cell ${cell ? 'ship' : ''}`}\n                            onDrop={(e) => handleDrop(e, index)}\n                            onDragOver={(e) => e.preventDefault()}\n                        >\n                            {cell ? \"S\" : \"\"}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"grid-container\">\n                    {enemyBoard.map((cell, index) => (\n                        <div\n                            key={index}\n                            className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                            onClick={() => attackEnemy(index)}\n                        >\n                            {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                        </div>\n                    ))}\n                </div>\n\n                {/* Reset Button */}\n                <button onClick={resetGame} className=\"restart-button\">\n                    Reset Game\n                </button>\n\n                {/* Game Over Notification */}\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Play;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}