{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst SHIPS = [{\n  size: 5,\n  name: \"Carrier\"\n}, {\n  size: 4,\n  name: \"Battleship\"\n}, {\n  size: 3,\n  name: \"Cruiser\"\n}, {\n  size: 3,\n  name: \"Submarine\"\n}, {\n  size: 2,\n  name: \"Destroyer\"\n}];\nconst SetEnemyBoard = ({\n  setEnemyBoard\n}) => {\n  _s();\n  const generateRandomPosition = size => {\n    const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\"; // Randomly choose orientation\n    let startRow, startCol;\n    if (direction === \"horizontal\") {\n      startRow = Math.floor(Math.random() * 10);\n      startCol = Math.floor(Math.random() * (10 - size)); // Ensure ship fits horizontally\n    } else {\n      startRow = Math.floor(Math.random() * (10 - size)); // Ensure ship fits vertically\n      startCol = Math.floor(Math.random() * 10);\n    }\n    return {\n      startRow,\n      startCol,\n      direction\n    };\n  };\n  const checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n    for (let i = 0; i < ship.size; i++) {\n      let row = startRow;\n      let col = startCol;\n      if (direction === \"horizontal\") col += i;\n      if (direction === \"vertical\") row += i;\n      if (board[row][col] !== null) return false; // Spot already occupied\n    }\n    return true;\n  };\n  const placeShip = (board, ship) => {\n    const {\n      size\n    } = ship;\n    let placed = false;\n    while (!placed) {\n      const {\n        startRow,\n        startCol,\n        direction\n      } = generateRandomPosition(size);\n      if (checkIfPlaceable(board, ship, startRow, startCol, direction)) {\n        let newBoard = [...board];\n        for (let i = 0; i < size; i++) {\n          let row = startRow;\n          let col = startCol;\n          if (direction === \"horizontal\") col += i;\n          if (direction === \"vertical\") row += i;\n          newBoard[row][col] = ship.name.charAt(0); // Place the ship (initial letter)\n        }\n        setEnemyBoard(newBoard); // Update board after placing the ship\n        placed = true;\n      }\n    }\n  };\n\n  // We will initialize the enemy board once when the component mounts.\n  useEffect(() => {\n    let emptyBoard = Array(10).fill(null).map(() => Array(10).fill(null)); // 10x10 empty board\n\n    // Place each ship randomly\n    SHIPS.forEach(ship => placeShip(emptyBoard, ship));\n\n    // Once the ships are placed, set the board state\n    setEnemyBoard(emptyBoard);\n  }, [setEnemyBoard]); // Dependency on setEnemyBoard to ensure the function is stable\n\n  return null; // This component just sets up the board, no UI necessary\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SHIPS","size","name","SetEnemyBoard","setEnemyBoard","_s","generateRandomPosition","direction","Math","random","startRow","startCol","floor","checkIfPlaceable","board","ship","i","row","col","placeShip","placed","newBoard","charAt","emptyBoard","Array","fill","map","forEach","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import { useEffect } from \"react\";\n\nconst SHIPS = [\n    { size: 5, name: \"Carrier\" },\n    { size: 4, name: \"Battleship\" },\n    { size: 3, name: \"Cruiser\" },\n    { size: 3, name: \"Submarine\" },\n    { size: 2, name: \"Destroyer\" }\n];\n\nconst SetEnemyBoard = ({ setEnemyBoard }) => {\n    const generateRandomPosition = (size) => {\n        const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\"; // Randomly choose orientation\n        let startRow, startCol;\n        if (direction === \"horizontal\") {\n            startRow = Math.floor(Math.random() * 10);\n            startCol = Math.floor(Math.random() * (10 - size)); // Ensure ship fits horizontally\n        } else {\n            startRow = Math.floor(Math.random() * (10 - size)); // Ensure ship fits vertically\n            startCol = Math.floor(Math.random() * 10);\n        }\n        return { startRow, startCol, direction };\n    };\n\n    const checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n        for (let i = 0; i < ship.size; i++) {\n            let row = startRow;\n            let col = startCol;\n            if (direction === \"horizontal\") col += i;\n            if (direction === \"vertical\") row += i;\n            if (board[row][col] !== null) return false; // Spot already occupied\n        }\n        return true;\n    };\n\n    const placeShip = (board, ship) => {\n        const { size } = ship;\n        let placed = false;\n        while (!placed) {\n            const { startRow, startCol, direction } = generateRandomPosition(size);\n            if (checkIfPlaceable(board, ship, startRow, startCol, direction)) {\n                let newBoard = [...board];\n                for (let i = 0; i < size; i++) {\n                    let row = startRow;\n                    let col = startCol;\n                    if (direction === \"horizontal\") col += i;\n                    if (direction === \"vertical\") row += i;\n                    newBoard[row][col] = ship.name.charAt(0); // Place the ship (initial letter)\n                }\n                setEnemyBoard(newBoard); // Update board after placing the ship\n                placed = true;\n            }\n        }\n    };\n\n    // We will initialize the enemy board once when the component mounts.\n    useEffect(() => {\n        let emptyBoard = Array(10)\n            .fill(null)\n            .map(() => Array(10).fill(null)); // 10x10 empty board\n\n        // Place each ship randomly\n        SHIPS.forEach((ship) => placeShip(emptyBoard, ship));\n\n        // Once the ships are placed, set the board state\n        setEnemyBoard(emptyBoard);\n    }, [setEnemyBoard]); // Dependency on setEnemyBoard to ensure the function is stable\n\n    return null; // This component just sets up the board, no UI necessary\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}