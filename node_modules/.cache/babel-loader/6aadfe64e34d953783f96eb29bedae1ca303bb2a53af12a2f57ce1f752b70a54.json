{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst SHIPS = [{\n  size: 5,\n  name: \"Carrier\"\n}, {\n  size: 4,\n  name: \"Battleship\"\n}, {\n  size: 3,\n  name: \"Cruiser\"\n}, {\n  size: 3,\n  name: \"Submarine\"\n}, {\n  size: 2,\n  name: \"Destroyer\"\n}];\n\n// Generate a random ship placement\nconst generateRandomPosition = (size, boardSize) => {\n  const isHorizontal = Math.random() > 0.5; // Randomly choose orientation\n  let startRow, startCol;\n  if (isHorizontal) {\n    startRow = Math.floor(Math.random() * boardSize);\n    startCol = Math.floor(Math.random() * (boardSize - size));\n  } else {\n    startRow = Math.floor(Math.random() * (boardSize - size));\n    startCol = Math.floor(Math.random() * boardSize);\n  }\n  return {\n    startRow,\n    startCol,\n    isHorizontal\n  };\n};\n\n// Check if a ship can be placed\nconst canPlaceShip = (board, size, startRow, startCol, isHorizontal, boardSize) => {\n  for (let i = 0; i < size; i++) {\n    let row = startRow;\n    let col = startCol;\n    if (isHorizontal) col += i;else row += i;\n    if (row >= boardSize || col >= boardSize || board[row * boardSize + col] !== null) {\n      return false; // Out of bounds or occupied\n    }\n  }\n  return true;\n};\n\n// Place ship on the board\nconst placeShip = (board, ship, boardSize) => {\n  let newBoard = [...board];\n  let placed = false;\n  while (!placed) {\n    const {\n      startRow,\n      startCol,\n      isHorizontal\n    } = generateRandomPosition(ship.size, boardSize);\n    if (canPlaceShip(newBoard, ship.size, startRow, startCol, isHorizontal, boardSize)) {\n      for (let i = 0; i < ship.size; i++) {\n        let row = startRow;\n        let col = startCol;\n        if (isHorizontal) col += i;else row += i;\n        newBoard[row * boardSize + col] = ship.name.charAt(0); // Use ship initial\n      }\n      placed = true;\n    }\n  }\n  return newBoard;\n};\nconst SetEnemyBoard = ({\n  setEnemyBoard\n}) => {\n  _s();\n  useEffect(() => {\n    let board = Array(100).fill(null);\n    SHIPS.forEach(ship => {\n      board = placeShip(board, ship, 10);\n    });\n    setEnemyBoard(board);\n  }, [setEnemyBoard]);\n  return null; // No UI, just logic\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SHIPS","size","name","generateRandomPosition","boardSize","isHorizontal","Math","random","startRow","startCol","floor","canPlaceShip","board","i","row","col","placeShip","ship","newBoard","placed","charAt","SetEnemyBoard","setEnemyBoard","_s","Array","fill","forEach","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import { useEffect } from \"react\";\n\nconst SHIPS = [\n    { size: 5, name: \"Carrier\" },\n    { size: 4, name: \"Battleship\" },\n    { size: 3, name: \"Cruiser\" },\n    { size: 3, name: \"Submarine\" },\n    { size: 2, name: \"Destroyer\" }\n];\n\n// Generate a random ship placement\nconst generateRandomPosition = (size, boardSize) => {\n    const isHorizontal = Math.random() > 0.5; // Randomly choose orientation\n    let startRow, startCol;\n\n    if (isHorizontal) {\n        startRow = Math.floor(Math.random() * boardSize);\n        startCol = Math.floor(Math.random() * (boardSize - size));\n    } else {\n        startRow = Math.floor(Math.random() * (boardSize - size));\n        startCol = Math.floor(Math.random() * boardSize);\n    }\n\n    return { startRow, startCol, isHorizontal };\n};\n\n// Check if a ship can be placed\nconst canPlaceShip = (board, size, startRow, startCol, isHorizontal, boardSize) => {\n    for (let i = 0; i < size; i++) {\n        let row = startRow;\n        let col = startCol;\n        if (isHorizontal) col += i;\n        else row += i;\n\n        if (row >= boardSize || col >= boardSize || board[row * boardSize + col] !== null) {\n            return false; // Out of bounds or occupied\n        }\n    }\n    return true;\n};\n\n// Place ship on the board\nconst placeShip = (board, ship, boardSize) => {\n    let newBoard = [...board];\n    let placed = false;\n\n    while (!placed) {\n        const { startRow, startCol, isHorizontal } = generateRandomPosition(ship.size, boardSize);\n        if (canPlaceShip(newBoard, ship.size, startRow, startCol, isHorizontal, boardSize)) {\n            for (let i = 0; i < ship.size; i++) {\n                let row = startRow;\n                let col = startCol;\n                if (isHorizontal) col += i;\n                else row += i;\n                newBoard[row * boardSize + col] = ship.name.charAt(0); // Use ship initial\n            }\n            placed = true;\n        }\n    }\n\n    return newBoard;\n};\n\nconst SetEnemyBoard = ({ setEnemyBoard }) => {\n    useEffect(() => {\n        let board = Array(100).fill(null);\n        SHIPS.forEach(ship => {\n            board = placeShip(board, ship, 10);\n        });\n        setEnemyBoard(board);\n    }, [setEnemyBoard]);\n\n    return null; // No UI, just logic\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}