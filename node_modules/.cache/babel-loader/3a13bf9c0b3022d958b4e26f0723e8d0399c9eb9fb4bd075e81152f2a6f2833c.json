{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst BOARD_SIZE = 10;\nconst generateRandomPosition = (shipSize, isHorizontal) => {\n  let startIndex;\n  if (isHorizontal) {\n    startIndex = Math.floor(Math.random() * BOARD_SIZE) * BOARD_SIZE + Math.floor(Math.random() * (BOARD_SIZE - shipSize));\n  } else {\n    startIndex = Math.floor(Math.random() * (BOARD_SIZE - shipSize)) * BOARD_SIZE + Math.floor(Math.random() * BOARD_SIZE);\n  }\n  return startIndex;\n};\nconst isValidPlacement = (board, shipSize, startIndex, isHorizontal) => {\n  const positions = [];\n  for (let i = 0; i < shipSize; i++) {\n    let index;\n    if (isHorizontal) {\n      index = startIndex + i;\n      if (Math.floor(index / BOARD_SIZE) !== Math.floor(startIndex / BOARD_SIZE)) return false; // Prevent wrapping around\n    } else {\n      index = startIndex + i * BOARD_SIZE;\n      if (index >= 100) return false; // Prevent exceeding grid size\n    }\n    if (board[index] !== null) return false; // Prevent overlapping\n    positions.push(index);\n  }\n  return positions;\n};\nconst placeShipsRandomly = ships => {\n  const enemyBoard = Array(100).fill(null);\n  ships.forEach(ship => {\n    let placed = false;\n    while (!placed) {\n      const isHorizontal = Math.random() > 0.5;\n      const startIndex = generateRandomPosition(ship.size, isHorizontal);\n      const positions = isValidPlacement(enemyBoard, ship.size, startIndex, isHorizontal);\n      if (positions) {\n        positions.forEach(pos => enemyBoard[pos] = ship.id); // Place ship\n        placed = true;\n      }\n    }\n  });\n  return enemyBoard;\n};\nconst SetEnemyBoard = ({\n  ships,\n  setEnemyBoard\n}) => {\n  _s();\n  useEffect(() => {\n    const enemyBoard = placeShipsRandomly(ships);\n    setEnemyBoard(enemyBoard); // Update the enemy board with randomly placed ships\n  }, [ships, setEnemyBoard]);\n  return null; // This component doesn't render anything\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","BOARD_SIZE","generateRandomPosition","shipSize","isHorizontal","startIndex","Math","floor","random","isValidPlacement","board","positions","i","index","push","placeShipsRandomly","ships","enemyBoard","Array","fill","forEach","ship","placed","size","pos","id","SetEnemyBoard","setEnemyBoard","_s","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import {useEffect} from \"react\";\n\nconst BOARD_SIZE = 10;\n\nconst generateRandomPosition = (shipSize, isHorizontal) => {\n    let startIndex;\n    if (isHorizontal) {\n        startIndex = Math.floor(Math.random() * BOARD_SIZE) * BOARD_SIZE + Math.floor(Math.random() * (BOARD_SIZE - shipSize));\n    } else {\n        startIndex = Math.floor(Math.random() * (BOARD_SIZE - shipSize)) * BOARD_SIZE + Math.floor(Math.random() * BOARD_SIZE);\n    }\n    return startIndex;\n};\n\nconst isValidPlacement = (board, shipSize, startIndex, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < shipSize; i++) {\n        let index;\n        if (isHorizontal) {\n            index = startIndex + i;\n            if (Math.floor(index / BOARD_SIZE) !== Math.floor(startIndex / BOARD_SIZE)) return false; // Prevent wrapping around\n        } else {\n            index = startIndex + i * BOARD_SIZE;\n            if (index >= 100) return false; // Prevent exceeding grid size\n        }\n        if (board[index] !== null) return false; // Prevent overlapping\n        positions.push(index);\n    }\n    return positions;\n};\n\nconst placeShipsRandomly = (ships) => {\n    const enemyBoard = Array(100).fill(null);\n\n    ships.forEach(ship => {\n        let placed = false;\n        while (!placed) {\n            const isHorizontal = Math.random() > 0.5;\n            const startIndex = generateRandomPosition(ship.size, isHorizontal);\n            const positions = isValidPlacement(enemyBoard, ship.size, startIndex, isHorizontal);\n\n            if (positions) {\n                positions.forEach(pos => enemyBoard[pos] = ship.id); // Place ship\n                placed = true;\n            }\n        }\n    });\n\n    return enemyBoard;\n};\n\nconst SetEnemyBoard = ({ ships, setEnemyBoard }) => {\n    useEffect(() => {\n        const enemyBoard = placeShipsRandomly(ships);\n        setEnemyBoard(enemyBoard); // Update the enemy board with randomly placed ships\n    }, [ships, setEnemyBoard]);\n\n    return null; // This component doesn't render anything\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}