{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n  const checkGameOver = board => {\n    return board.every(cell => cell === null || cell === \"H\" || cell === \"M\");\n  };\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault(); // Prevent dragging if ship is placed\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...playerBoard];\n    const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips(prevShips => prevShips.map(s => s.id === ship.id ? {\n      ...s,\n      placed: true,\n      positions: newShipPositions\n    } : s));\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setPlayerBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Check if all ships are placed on teh player board\n  const allShipsPlaced = () => {\n    return ships.every(ship => ship.placed);\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!allShipsPlaced()) {\n      alert(\"You must place all your ships before attacking!\");\n      return;\n    }\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n    let newBoard = [...enemyBoard];\n    newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n    setEnemyBoard(newBoard);\n    if (checkGameOver(newBoard)) {\n      setGameOver(true);\n      return;\n    }\n    setIsPlayerTurn(false);\n    setTimeout(enemyAttack, 1000);\n  };\n\n  // Enemy attacks Your Board\n  // const enemyAttack = () => {\n  //     if (gameOver) return;\n  //\n  //     let availableCells = playerBoard\n  //         .map((cell, index) => (cell !== \"H\" && cell !== \"M\" ? index : null))\n  //         .filter(index => index !== null);\n  //\n  //     if (availableCells.length === 0) return; // No more moves available\n  //\n  //     let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n  //\n  //     let newBoard = [...playerBoard];\n  //     newBoard[attackIndex] = newBoard[attackIndex] !== null ? \"H\" : \"M\";\n  //     setPlayerBoard(newBoard);\n  //\n  //     if (checkGameOver(newBoard)) {\n  //         setGameOver(true);\n  //         return;\n  //     }\n  //\n  //     setIsPlayerTurn(true); // Switch back to player's turn\n  // };\n\n  const enemyAttack = () => {\n    if (gameOver) return;\n    let availableCells = playerBoard.map((cell, index) => cell !== \"H\" && cell !== \"M\" ? index : null).filter(index => index !== null);\n    if (availableCells.length === 0) return; // No more moves available\n\n    let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n    let newBoard = [...playerBoard];\n    if (newBoard[attackIndex] !== null) {\n      // Ship hit (indicating the ship was present on that position)\n      newBoard[attackIndex] = \"H\"; // Mark as hit\n    } else {\n      // Miss\n      newBoard[attackIndex] = \"M\"; // Mark as miss\n    }\n    setPlayerBoard(newBoard);\n    if (checkGameOver(newBoard)) {\n      setGameOver(true);\n      return;\n    }\n    setIsPlayerTurn(true); // Switch back to player's turn\n  };\n\n  // Define the state for buttonClicked\n  const [buttonClicked, setButtonClicked] = useState(false);\n  const [resetTrigger, setResetTrigger] = useState(false);\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setGameStarted(false); // Ensure timer stops\n    setGameOver(false);\n    setIsPlayerTurn(true);\n    setPlayerBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips([{\n      id: 'Carrier 5x1',\n      size: 5,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Battleship 4x1',\n      size: 4,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Cruiser 3x1',\n      size: 3,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Submarine 3x1',\n      size: 3,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Destroyer 2x1',\n      size: 2,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }]);\n    setTimer(0); // Reset timer\n\n    setResetTrigger(prev => !prev); // Toggle reset trigger\n\n    // Add the flash effect\n    setButtonClicked(true);\n\n    // Reset the flash effect immediately after it completes (to allow the next click)\n    setTimeout(() => {\n      setButtonClicked(false); // This should happen after the timeout completes\n    }, 300);\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: `restart-button ${buttonClicked ? 'flash' : ''}` // Add the flash class when clicked\n          ,\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-description\",\n        children: \"Bellow, you can set your board and play against the enemy AI!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 25\n          }, this), ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this), playerBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Assign shipClass based on the cell's content (ship's ID)\n              const shipClass = cell ? getShipClass(cell) : ''; // Using the getShipClass function to get the ship's class name\n\n              let cellClass = '';\n              if (cell === \"H\") {\n                cellClass = 'hit'; // Add hit class for styling the hit state\n              } else if (cell === \"M\") {\n                cellClass = 'miss'; // Add miss class for styling the miss state\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${cellClass} ${shipClass}` // Combine the hit/miss and ship class\n                ,\n                onDrop: e => handleDrop(e, rowIndex * 10 + index),\n                onDragOver: e => e.preventDefault(),\n                children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : cell ? \"●\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this), ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n              onClick: () => attackEnemy(rowIndex * 10 + index),\n              children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 37\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SetEnemyBoard, {\n        setEnemyBoard: setEnemyBoard,\n        resetTrigger: resetTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"hVhHUtC1OaINYJmDkWsREwZaMgY=\");\n_c = Normal;\nexport default Normal;\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","SetEnemyBoard","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","enemyBoard","setEnemyBoard","Array","fill","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","isPlayerTurn","setIsPlayerTurn","playerBoard","setPlayerBoard","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","checkGameOver","board","every","cell","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","some","pos","alert","prevShips","map","s","forEach","startIndex","i","newIndex","Math","floor","push","handleRotate","shipId","allShipsPlaced","attackEnemy","setTimeout","enemyAttack","availableCells","filter","length","attackIndex","random","buttonClicked","setButtonClicked","resetTrigger","setResetTrigger","resetGame","prev","getShipClass","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","draggable","onDragStart","onDragEnd","disabled","label","from","_","rowIndex","slice","shipClass","cellClass","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        {id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true},\n        {id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true},\n        {id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n        {id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n        {id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true},\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n    const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    const checkGameOver = (board) => {\n        return board.every((cell) => cell === null || cell === \"H\" || cell === \"M\");\n    };\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault(); // Prevent dragging if ship is placed\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...playerBoard];\n        const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips((prevShips) => prevShips.map(s => s.id === ship.id ? {\n            ...s,\n            placed: true,\n            positions: newShipPositions\n        } : s));\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setPlayerBoard(newBoard);\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return {...ship, isHorizontal: !ship.isHorizontal};\n            }\n            return ship;\n        }));\n    };\n\n    // Check if all ships are placed on teh player board\n    const allShipsPlaced = () => {\n        return ships.every(ship => ship.placed);\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!allShipsPlaced()) {\n            alert(\"You must place all your ships before attacking!\");\n            return;\n        }\n\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n\n        let newBoard = [...enemyBoard];\n        newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n        setEnemyBoard(newBoard);\n\n        if (checkGameOver(newBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        setIsPlayerTurn(false);\n        setTimeout(enemyAttack, 1000);\n    };\n\n    // Enemy attacks Your Board\n    // const enemyAttack = () => {\n    //     if (gameOver) return;\n    //\n    //     let availableCells = playerBoard\n    //         .map((cell, index) => (cell !== \"H\" && cell !== \"M\" ? index : null))\n    //         .filter(index => index !== null);\n    //\n    //     if (availableCells.length === 0) return; // No more moves available\n    //\n    //     let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n    //\n    //     let newBoard = [...playerBoard];\n    //     newBoard[attackIndex] = newBoard[attackIndex] !== null ? \"H\" : \"M\";\n    //     setPlayerBoard(newBoard);\n    //\n    //     if (checkGameOver(newBoard)) {\n    //         setGameOver(true);\n    //         return;\n    //     }\n    //\n    //     setIsPlayerTurn(true); // Switch back to player's turn\n    // };\n\n    const enemyAttack = () => {\n        if (gameOver) return;\n\n        let availableCells = playerBoard\n            .map((cell, index) => (cell !== \"H\" && cell !== \"M\" ? index : null))\n            .filter(index => index !== null);\n\n        if (availableCells.length === 0) return; // No more moves available\n\n        let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n        let newBoard = [...playerBoard];\n        if (newBoard[attackIndex] !== null) {\n            // Ship hit (indicating the ship was present on that position)\n            newBoard[attackIndex] = \"H\"; // Mark as hit\n        } else {\n            // Miss\n            newBoard[attackIndex] = \"M\"; // Mark as miss\n        }\n        setPlayerBoard(newBoard);\n\n        if (checkGameOver(newBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        setIsPlayerTurn(true); // Switch back to player's turn\n    };\n\n\n    // Define the state for buttonClicked\n    const [buttonClicked, setButtonClicked] = useState(false);\n\n    const [resetTrigger, setResetTrigger] = useState(false);\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setGameStarted(false);  // Ensure timer stops\n        setGameOver(false);\n        setIsPlayerTurn(true);\n        setPlayerBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips([\n            {id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true},\n            {id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true},\n            {id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n            {id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n            {id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true},\n        ]);\n\n        setTimer(0);  // Reset timer\n\n        setResetTrigger(prev => !prev); // Toggle reset trigger\n\n        // Add the flash effect\n        setButtonClicked(true);\n\n        // Reset the flash effect immediately after it completes (to allow the next click)\n        setTimeout(() => {\n            setButtonClicked(false);  // This should happen after the timeout completes\n        }, 300);\n\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    }\n\n    return (\n        <div className=\"play\">\n            <Navbar/>\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button\n                        onClick={resetGame}\n                        className={`restart-button ${buttonClicked ? 'flash' : ''}`} // Add the flash class when clicked\n                    >\n                        Reset Game\n                    </button>\n                </div>\n\n                <div className=\"board-description\">\n                    Bellow, you can set your board and play against the enemy AI!\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                    onDragStart={(e) => handleDragStart(e, ship)}\n                                    onDragEnd={handleDragEnd}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    onClick={() => handleRotate(ship.id)}\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div>\n                        {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({length: 10}).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {playerBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    // Assign shipClass based on the cell's content (ship's ID)\n                                    const shipClass = cell ? getShipClass(cell) : '';  // Using the getShipClass function to get the ship's class name\n\n                                    let cellClass = '';\n\n                                    if (cell === \"H\") {\n                                        cellClass = 'hit'; // Add hit class for styling the hit state\n                                    } else if (cell === \"M\") {\n                                        cellClass = 'miss'; // Add miss class for styling the miss state\n                                    }\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${cellClass} ${shipClass}`} // Combine the hit/miss and ship class\n                                            onDrop={(e) => handleDrop(e, rowIndex * 10 + index)}\n                                            onDragOver={(e) => e.preventDefault()}\n                                        >\n                                            {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : cell ? \"●\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div>\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n\n                    <div className=\"grid-container\">\n                        {Array.from({length: 10}).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => (\n                                    <div\n                                        key={index}\n                                        className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                        onClick={() => attackEnemy(rowIndex * 10 + index)}\n                                    >\n                                        {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                <SetEnemyBoard setEnemyBoard={setEnemyBoard} resetTrigger={resetTrigger}/>\n\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer/>\n        </div>\n    );\n}\n\nexport default Normal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}