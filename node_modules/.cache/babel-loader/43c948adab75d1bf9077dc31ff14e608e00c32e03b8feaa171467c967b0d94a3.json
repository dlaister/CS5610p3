{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n  const checkGameOver = board => {\n    return board.every(cell => cell === null || cell === \"H\" || cell === \"M\");\n  };\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault(); // Prevent dragging if ship is placed\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  // const handleDrop = (e, index) => {\n  //     e.preventDefault();\n  //     const ship = JSON.parse(e.dataTransfer.getData('ship'));\n  //\n  //     if (ship.placed) return; // Prevent re-placing the same ship\n  //\n  //     const newBoard = [...board];\n  //     const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n  //\n  //     if (!newShipPositions) return; // Prevent invalid placement\n  //\n  //     // Prevent ship overlap\n  //     if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n  //         alert(\"Ships cannot overlap!\");\n  //         return;\n  //     }\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...playerBoard];\n    const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips(prevShips => prevShips.map(s => s.id === ship.id ? {\n      ...s,\n      placed: true,\n      positions: newShipPositions\n    } : s));\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    // setBoard(newBoard);\n    setPlayerBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Attack enemy board\n  // const attackEnemy = (index) => {\n  //     if (!gameStarted) setGameStarted(true);\n  //     if (gameOver || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n  //\n  //     let newBoard = [...enemyBoard];\n  //     newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n  //     setEnemyBoard(newBoard);\n  //\n  //     if (checkGameOver(newBoard)) {\n  //         setGameOver(true);\n  //     }\n  // };\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n    let newBoard = [...enemyBoard];\n    newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n    setEnemyBoard(newBoard);\n    if (checkGameOver(newBoard)) {\n      setGameOver(true);\n      return;\n    }\n    setIsPlayerTurn(false); // Switch to enemy turn\n    setTimeout(enemyAttack, 1000); // Delay enemy attack slightly for realism\n  };\n  const enemyAttack = () => {\n    if (gameOver) return;\n    let availableCells = playerBoard.map((cell, index) => cell !== \"H\" && cell !== \"M\" ? index : null).filter(index => index !== null);\n    if (availableCells.length === 0) return; // No more moves available\n\n    let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n    let newBoard = [...playerBoard];\n    newBoard[attackIndex] = newBoard[attackIndex] !== null ? \"H\" : \"M\";\n    setPlayerBoard(newBoard);\n    if (checkGameOver(newBoard)) {\n      setGameOver(true);\n      return;\n    }\n    setIsPlayerTurn(true); // Switch back to player's turn\n  };\n  const [resetTrigger, setResetTrigger] = useState(false);\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    // setGameStarted(false);\n    // setTimer(0);\n    // setGameOver(false);\n    setIsPlayerTurn(true);\n    setPlayerBoard(Array(100).fill(null));\n    setResetTrigger(prev => !prev); // Toggle the trigger to signal SetEnemyBoard to reset\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"restart-button\",\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-description\",\n        children: \"Bellow, you can set your board and play against the enemy AI!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), playerBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Get ship name class if a ship is placed\n              const shipClass = cell ? getShipClass(cell) : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${shipClass}` // Apply the ship class here\n                ,\n                onDrop: e => handleDrop(e, rowIndex * 10 + index),\n                onDragOver: e => e.preventDefault(),\n                children: cell ? \"S\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n              onClick: () => attackEnemy(rowIndex * 10 + index),\n              children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 37\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SetEnemyBoard, {\n        setEnemyBoard: setEnemyBoard,\n        resetTrigger: resetTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"DpApdl5MM6RXC917zEFSWYmr3zg=\");\n_c = Normal;\nexport default Normal;\n\n// TODO -- set board so that player can attack the enemy board only on their turn\n// TODO -- enemy logic to attack player\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","SetEnemyBoard","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","isPlayerTurn","setIsPlayerTurn","playerBoard","setPlayerBoard","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","checkGameOver","every","cell","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","some","pos","alert","prevShips","map","s","forEach","startIndex","i","newIndex","Math","floor","push","handleRotate","shipId","attackEnemy","setTimeout","enemyAttack","availableCells","filter","length","attackIndex","random","resetTrigger","setResetTrigger","resetGame","prev","getShipClass","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","draggable","onDragStart","onDragEnd","disabled","label","from","_","rowIndex","slice","shipClass","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n    const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    const checkGameOver = (board) => {\n        return board.every((cell) => cell === null || cell === \"H\" || cell === \"M\");\n    };\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault(); // Prevent dragging if ship is placed\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    // const handleDrop = (e, index) => {\n    //     e.preventDefault();\n    //     const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    //\n    //     if (ship.placed) return; // Prevent re-placing the same ship\n    //\n    //     const newBoard = [...board];\n    //     const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    //\n    //     if (!newShipPositions) return; // Prevent invalid placement\n    //\n    //     // Prevent ship overlap\n    //     if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n    //         alert(\"Ships cannot overlap!\");\n    //         return;\n    //     }\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...playerBoard];\n        const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n\n\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips((prevShips) => prevShips.map(s => s.id === ship.id ? { ...s, placed: true, positions: newShipPositions } : s));\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        // setBoard(newBoard);\n        setPlayerBoard(newBoard);\n\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return { ...ship, isHorizontal: !ship.isHorizontal };\n            }\n            return ship;\n        }));\n    };\n\n    // Attack enemy board\n    // const attackEnemy = (index) => {\n    //     if (!gameStarted) setGameStarted(true);\n    //     if (gameOver || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n    //\n    //     let newBoard = [...enemyBoard];\n    //     newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n    //     setEnemyBoard(newBoard);\n    //\n    //     if (checkGameOver(newBoard)) {\n    //         setGameOver(true);\n    //     }\n    // };\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n\n        let newBoard = [...enemyBoard];\n        newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n        setEnemyBoard(newBoard);\n\n        if (checkGameOver(newBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        setIsPlayerTurn(false); // Switch to enemy turn\n        setTimeout(enemyAttack, 1000); // Delay enemy attack slightly for realism\n    };\n\n    const enemyAttack = () => {\n        if (gameOver) return;\n\n        let availableCells = playerBoard\n            .map((cell, index) => (cell !== \"H\" && cell !== \"M\" ? index : null))\n            .filter(index => index !== null);\n\n        if (availableCells.length === 0) return; // No more moves available\n\n        let attackIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n        let newBoard = [...playerBoard];\n        newBoard[attackIndex] = newBoard[attackIndex] !== null ? \"H\" : \"M\";\n        setPlayerBoard(newBoard);\n\n        if (checkGameOver(newBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        setIsPlayerTurn(true); // Switch back to player's turn\n    };\n\n\n\n\n    const [resetTrigger, setResetTrigger] = useState(false);\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        // setGameStarted(false);\n        // setTimer(0);\n        // setGameOver(false);\n        setIsPlayerTurn(true);\n        setPlayerBoard(Array(100).fill(null));\n\n        setResetTrigger(prev => !prev); // Toggle the trigger to signal SetEnemyBoard to reset\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button onClick={resetGame} className=\"restart-button\">\n                        Reset Game\n                    </button>\n                </div>\n\n                <div className=\"board-description\">\n                    Bellow, you can set your board and play against the enemy AI!\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                    onDragStart={(e) => handleDragStart(e, ship)}\n                                    onDragEnd={handleDragEnd}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    onClick={() => handleRotate(ship.id)}\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {/*{board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {*/}\n                                {playerBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n\n                                    // Get ship name class if a ship is placed\n                                    const shipClass = cell ? getShipClass(cell) : '';\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${shipClass}`} // Apply the ship class here\n                                            onDrop={(e) => handleDrop(e, rowIndex * 10 + index)}\n                                            onDragOver={(e) => e.preventDefault()}\n                                        >\n                                            {cell ? \"S\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div>\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n\n                    <div className=\"grid-container\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => (\n                                    <div\n                                        key={index}\n                                        className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                        onClick={() => attackEnemy(rowIndex * 10 + index)}\n                                    >\n                                        {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                <SetEnemyBoard setEnemyBoard={setEnemyBoard} resetTrigger={resetTrigger} />\n\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Normal;\n\n// TODO -- set board so that player can attack the enemy board only on their turn\n// TODO -- enemy logic to attack player\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}