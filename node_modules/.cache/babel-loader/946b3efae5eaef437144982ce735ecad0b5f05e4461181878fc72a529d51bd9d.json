{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nfunction SetEnemyBoard({\n  setEnemyBoard\n}) {\n  _s();\n  // Defined ships\n  const SHIPS = [{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }];\n\n  // Randomly place a ship on the enemy board\n  const placeShipRandomly = (board, ship) => {\n    let shipPlaced = false;\n    while (!shipPlaced) {\n      // Randomize position and orientation\n      const isHorizontal = Math.random() < 0.5;\n      const startPosition = Math.floor(Math.random() * (100 - ship.size)); // Random start index\n\n      // Calculate the coordinates for the ship (depending on orientation)\n      const positions = [];\n      for (let i = 0; i < ship.size; i++) {\n        const position = isHorizontal ? startPosition + i : startPosition + i * 10; // Horizontal or vertical placement\n        positions.push(position);\n      }\n\n      // Check if the ship fits within the grid and if there's no overlap\n      const canPlaceShip = positions.every(position => board[position] === null);\n      if (canPlaceShip) {\n        positions.forEach(position => {\n          board[position] = 'S'; // Mark the ship on the board\n        });\n        shipPlaced = true;\n        return {\n          board,\n          positions,\n          isHorizontal\n        };\n      }\n    }\n  };\n\n  // Effect hook to set the enemy board when the component mounts\n  useEffect(() => {\n    const newBoard = Array(100).fill(null); // Initialize an empty board\n\n    // Randomly place each ship from SHIPS array\n    SHIPS.forEach(ship => {\n      const updatedBoard = placeShipRandomly([...newBoard], ship);\n      // You can optionally store ship data (positions, etc.) elsewhere if needed\n    });\n    setEnemyBoard(newBoard); // Set the final enemy board with the ships\n  }, [setEnemyBoard, SHIPS]); // Adding SHIPS as a dependency\n\n  return null; // This component does not render anything itself\n}\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SetEnemyBoard","setEnemyBoard","_s","SHIPS","id","size","placed","positions","isHorizontal","placeShipRandomly","board","ship","shipPlaced","Math","random","startPosition","floor","i","position","push","canPlaceShip","every","forEach","newBoard","Array","fill","updatedBoard","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import { useEffect } from 'react';\n\nfunction SetEnemyBoard({ setEnemyBoard }) {\n    // Defined ships\n    const SHIPS = [\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true }\n    ];\n\n    // Randomly place a ship on the enemy board\n    const placeShipRandomly = (board, ship) => {\n        let shipPlaced = false;\n        while (!shipPlaced) {\n            // Randomize position and orientation\n            const isHorizontal = Math.random() < 0.5;\n            const startPosition = Math.floor(Math.random() * (100 - ship.size)); // Random start index\n\n            // Calculate the coordinates for the ship (depending on orientation)\n            const positions = [];\n            for (let i = 0; i < ship.size; i++) {\n                const position = isHorizontal ? startPosition + i : startPosition + i * 10; // Horizontal or vertical placement\n                positions.push(position);\n            }\n\n            // Check if the ship fits within the grid and if there's no overlap\n            const canPlaceShip = positions.every(position => board[position] === null);\n\n            if (canPlaceShip) {\n                positions.forEach(position => {\n                    board[position] = 'S'; // Mark the ship on the board\n                });\n                shipPlaced = true;\n                return { board, positions, isHorizontal };\n            }\n        }\n    };\n\n    // Effect hook to set the enemy board when the component mounts\n    useEffect(() => {\n        const newBoard = Array(100).fill(null); // Initialize an empty board\n\n        // Randomly place each ship from SHIPS array\n        SHIPS.forEach((ship) => {\n            const updatedBoard = placeShipRandomly([...newBoard], ship);\n            // You can optionally store ship data (positions, etc.) elsewhere if needed\n        });\n\n        setEnemyBoard(newBoard); // Set the final enemy board with the ships\n    }, [setEnemyBoard, SHIPS]); // Adding SHIPS as a dependency\n\n    return null; // This component does not render anything itself\n}\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}