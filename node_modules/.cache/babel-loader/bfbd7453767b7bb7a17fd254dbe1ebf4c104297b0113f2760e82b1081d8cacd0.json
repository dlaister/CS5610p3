{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst SHIPS = [{\n  size: 5,\n  name: \"Carrier\"\n}, {\n  size: 4,\n  name: \"Battleship\"\n}, {\n  size: 3,\n  name: \"Cruiser\"\n}, {\n  size: 3,\n  name: \"Submarine\"\n}, {\n  size: 2,\n  name: \"Destroyer\"\n}];\n\n// Helper function to generate random positions for placing ships\nconst generateRandomPosition = size => {\n  const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\"; // Randomly choose orientation\n  let startRow, startCol;\n  if (direction === \"horizontal\") {\n    startRow = Math.floor(Math.random() * 10);\n    startCol = Math.floor(Math.random() * (10 - size)); // Ensure ship fits horizontally\n  } else {\n    startRow = Math.floor(Math.random() * (10 - size)); // Ensure ship fits vertically\n    startCol = Math.floor(Math.random() * 10);\n  }\n  return {\n    startRow,\n    startCol,\n    direction\n  };\n};\n\n// Helper function to check if a ship can be placed on the board\nconst checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n  for (let i = 0; i < ship.size; i++) {\n    let row = startRow;\n    let col = startCol;\n    if (direction === \"horizontal\") col += i;\n    if (direction === \"vertical\") row += i;\n    if (board[row][col] !== null) return false; // Spot already occupied\n  }\n  return true;\n};\n\n// Helper function to place a ship on the board\nconst placeShip = (board, ship, setEnemyBoard) => {\n  const {\n    size\n  } = ship;\n  let placed = false;\n  while (!placed) {\n    const {\n      startRow,\n      startCol,\n      direction\n    } = generateRandomPosition(size);\n    if (checkIfPlaceable(board, ship, startRow, startCol, direction)) {\n      let newBoard = [...board];\n      for (let i = 0; i < size; i++) {\n        let row = startRow;\n        let col = startCol;\n        if (direction === \"horizontal\") col += i;\n        if (direction === \"vertical\") row += i;\n        newBoard[row][col] = ship.name.charAt(0); // Place the ship (initial letter)\n      }\n      setEnemyBoard(newBoard); // Update board after placing the ship\n      placed = true;\n    }\n  }\n};\nconst SetEnemyBoard = ({\n  setEnemyBoard\n}) => {\n  _s();\n  // We will initialize the enemy board once when the component mounts.\n  useEffect(() => {\n    let emptyBoard = Array(10).fill(null).map(() => Array(10).fill(null)); // 10x10 empty board\n\n    // Place each ship randomly\n    SHIPS.forEach(ship => placeShip(emptyBoard, ship, setEnemyBoard));\n\n    // Once the ships are placed, set the board state\n    setEnemyBoard(emptyBoard);\n  }, [setEnemyBoard]); // Dependency on setEnemyBoard to ensure the function is stable\n\n  return null; // This component just sets up the board, no UI necessary\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SHIPS","size","name","generateRandomPosition","direction","Math","random","startRow","startCol","floor","checkIfPlaceable","board","ship","i","row","col","placeShip","setEnemyBoard","placed","newBoard","charAt","SetEnemyBoard","_s","emptyBoard","Array","fill","map","forEach","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["import { useEffect } from \"react\";\n\nconst SHIPS = [\n    { size: 5, name: \"Carrier\" },\n    { size: 4, name: \"Battleship\" },\n    { size: 3, name: \"Cruiser\" },\n    { size: 3, name: \"Submarine\" },\n    { size: 2, name: \"Destroyer\" }\n];\n\n// Helper function to generate random positions for placing ships\nconst generateRandomPosition = (size) => {\n    const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\"; // Randomly choose orientation\n    let startRow, startCol;\n    if (direction === \"horizontal\") {\n        startRow = Math.floor(Math.random() * 10);\n        startCol = Math.floor(Math.random() * (10 - size)); // Ensure ship fits horizontally\n    } else {\n        startRow = Math.floor(Math.random() * (10 - size)); // Ensure ship fits vertically\n        startCol = Math.floor(Math.random() * 10);\n    }\n    return { startRow, startCol, direction };\n};\n\n// Helper function to check if a ship can be placed on the board\nconst checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n    for (let i = 0; i < ship.size; i++) {\n        let row = startRow;\n        let col = startCol;\n        if (direction === \"horizontal\") col += i;\n        if (direction === \"vertical\") row += i;\n        if (board[row][col] !== null) return false; // Spot already occupied\n    }\n    return true;\n};\n\n// Helper function to place a ship on the board\nconst placeShip = (board, ship, setEnemyBoard) => {\n    const { size } = ship;\n    let placed = false;\n    while (!placed) {\n        const { startRow, startCol, direction } = generateRandomPosition(size);\n        if (checkIfPlaceable(board, ship, startRow, startCol, direction)) {\n            let newBoard = [...board];\n            for (let i = 0; i < size; i++) {\n                let row = startRow;\n                let col = startCol;\n                if (direction === \"horizontal\") col += i;\n                if (direction === \"vertical\") row += i;\n                newBoard[row][col] = ship.name.charAt(0); // Place the ship (initial letter)\n            }\n            setEnemyBoard(newBoard); // Update board after placing the ship\n            placed = true;\n        }\n    }\n};\n\nconst SetEnemyBoard = ({ setEnemyBoard }) => {\n    // We will initialize the enemy board once when the component mounts.\n    useEffect(() => {\n        let emptyBoard = Array(10)\n            .fill(null)\n            .map(() => Array(10).fill(null)); // 10x10 empty board\n\n        // Place each ship randomly\n        SHIPS.forEach((ship) => placeShip(emptyBoard, ship, setEnemyBoard));\n\n        // Once the ships are placed, set the board state\n        setEnemyBoard(emptyBoard);\n    }, [setEnemyBoard]); // Dependency on setEnemyBoard to ensure the function is stable\n\n    return null; // This component just sets up the board, no UI necessary\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}