{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/sample.css';\nimport Footer from '../components/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Play() {\n  _s();\n  // Board state: 10x10 grid (null represents empty)\n  const [board, setBoard] = useState(Array(100).fill(null));\n\n  // Ship state: Array of ships (example ships with random positions for now)\n  const [ships, setShips] = useState([{\n    id: '5x1',\n    size: 5,\n    placed: false,\n    positions: []\n  }, {\n    id: '4x1',\n    size: 4,\n    placed: false,\n    positions: []\n  }, {\n    id: '3x1',\n    size: 3,\n    placed: false,\n    positions: []\n  }, {\n    id: '3x1',\n    size: 3,\n    placed: false,\n    positions: []\n  }, {\n    id: '2x1',\n    size: 2,\n    placed: false,\n    positions: []\n  }]);\n\n  // Handle drag start event to track which ship is being dragged\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault();\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes it clear that the ship is being dragged\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle drop event to place the ship on the board\n  const handleDrop = (e, index) => {\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n    // Prevent placement if the ship has already been placed\n    if (ship.placed) return;\n    const newBoard = [...board];\n\n    // Check if the placement is valid (add your logic here for overlap, bounds)\n    const newShipPositions = getShipPositions(index, ship.size); // You'll define getShipPositions\n\n    // If valid, place the ship\n    if (newShipPositions) {\n      ship.placed = true;\n      ship.positions = newShipPositions;\n      setShips([...ships]); // Update ships state\n      // Mark positions on the board\n      newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n      setBoard(newBoard); // Update board state\n    }\n  };\n\n  // Helper function to calculate the positions of a ship based on start cell and size\n  const getShipPositions = (startIndex, size) => {\n    // Example logic: horizontal placement (adjust as needed)\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      const newIndex = startIndex + i;\n      if (newIndex < 100 && Math.floor(newIndex / 10) === Math.floor(startIndex / 10)) {\n        positions.push(newIndex);\n      } else {\n        return null; // Invalid placement (out of bounds or wrapping)\n      }\n    }\n    return positions;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Sample Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Timer: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"red-text\",\n          children: \"00:05:32 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-button\",\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"available-ships\",\n        children: ships.map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: ship.id,\n          className: \"ship\",\n          draggable: !ship.placed,\n          onDragStart: e => handleDragStart(e, ship),\n          onDragEnd: handleDragEnd,\n          children: ship.id\n        }, ship.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-board\",\n        children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `board-cell ${cell ? 'occupied' : ''}`,\n          onDrop: e => handleDrop(e, index),\n          onDragOver: e => e.preventDefault() // Allow drop\n          ,\n          children: cell && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: cell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 38\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Play, \"pu8l0jdS2OMbwN84JzEPdhSJTD4=\");\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["useState","Navbar","Footer","jsxDEV","_jsxDEV","Play","_s","board","setBoard","Array","fill","ships","setShips","id","size","placed","positions","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","forEach","pos","startIndex","i","newIndex","Math","floor","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","draggable","onDragStart","onDragEnd","cell","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/Play.js"],"sourcesContent":["import { useState } from 'react';\nimport Navbar from '../components/Navbar';\nimport '../styles/global.css';\nimport '../styles/sample.css';\nimport Footer from '../components/Footer';\n\nfunction Play() {\n    // Board state: 10x10 grid (null represents empty)\n    const [board, setBoard] = useState(Array(100).fill(null));\n\n    // Ship state: Array of ships (example ships with random positions for now)\n    const [ships, setShips] = useState([\n        { id: '5x1', size: 5, placed: false, positions: [] },\n        { id: '4x1', size: 4, placed: false, positions: [] },\n        { id: '3x1', size: 3, placed: false, positions: [] },\n        { id: '3x1', size: 3, placed: false, positions: [] },\n        { id: '2x1', size: 2, placed: false, positions: [] },\n    ]);\n\n    // Handle drag start event to track which ship is being dragged\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault();\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes it clear that the ship is being dragged\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n\n    // Handle drop event to place the ship on the board\n    const handleDrop = (e, index) => {\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        // Prevent placement if the ship has already been placed\n        if (ship.placed) return;\n\n        const newBoard = [...board];\n\n        // Check if the placement is valid (add your logic here for overlap, bounds)\n        const newShipPositions = getShipPositions(index, ship.size);  // You'll define getShipPositions\n\n        // If valid, place the ship\n        if (newShipPositions) {\n            ship.placed = true;\n            ship.positions = newShipPositions;\n            setShips([...ships]); // Update ships state\n            // Mark positions on the board\n            newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n            setBoard(newBoard); // Update board state\n        }\n    };\n\n    // Helper function to calculate the positions of a ship based on start cell and size\n    const getShipPositions = (startIndex, size) => {\n        // Example logic: horizontal placement (adjust as needed)\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            const newIndex = startIndex + i;\n            if (newIndex < 100 && Math.floor(newIndex / 10) === Math.floor(startIndex / 10)) {\n                positions.push(newIndex);\n            } else {\n                return null; // Invalid placement (out of bounds or wrapping)\n            }\n        }\n        return positions;\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n            <main>\n                <header>\n                    <h1>Battleship Sample Game</h1>\n                </header>\n\n                {/* Timer and Restart Button */}\n                <h3>\n                    Timer: <span className=\"red-text\">00:05:32 </span>\n                    <button className=\"restart-button\">Restart</button>\n                </h3>\n\n                {/* Available Ships Box */}\n                <div className=\"available-ships\">\n                    {ships.map((ship) => (\n                        <div\n                            key={ship.id}\n                            id={ship.id}\n                            className=\"ship\"\n                            draggable={!ship.placed}\n                            onDragStart={(e) => handleDragStart(e, ship)}\n                            onDragEnd={handleDragEnd}\n                        >\n                            {ship.id}\n                        </div>\n\n                    ))}\n                </div>\n\n                {/* Player Board (10x10 Grid) */}\n                <div className=\"player-board\">\n                    {board.map((cell, index) => (\n                        <div\n                            key={index}\n                            className={`board-cell ${cell ? 'occupied' : ''}`}\n                            onDrop={(e) => handleDrop(e, index)}\n                            onDragOver={(e) => e.preventDefault()} // Allow drop\n                        >\n                            {cell && <span>{cell}</span>}\n                        </div>\n                    ))}\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n\nexport default Play;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}