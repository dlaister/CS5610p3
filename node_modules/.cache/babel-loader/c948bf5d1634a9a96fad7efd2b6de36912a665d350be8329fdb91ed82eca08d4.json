{"ast":null,"code":"var _s = $RefreshSig$();\n// SetEnemyBoard.js\nimport { useEffect } from 'react';\nconst SetEnemyBoard = ({\n  setEnemyBoard,\n  ships\n}) => {\n  _s();\n  // Helper function to randomly place a ship\n  const placeShip = (board, ship) => {\n    const BOARD_SIZE = 10;\n    let placed = false;\n    let positions = [];\n    while (!placed) {\n      const isHorizontal = Math.random() > 0.5;\n      const row = Math.floor(Math.random() * BOARD_SIZE);\n      const col = Math.floor(Math.random() * BOARD_SIZE);\n\n      // Check if ship fits in the board\n      if (isHorizontal) {\n        if (col + ship.size > BOARD_SIZE) continue; // Ship goes out of bounds\n        positions = [];\n        for (let i = 0; i < ship.size; i++) {\n          if (board[row * BOARD_SIZE + (col + i)] !== null) return false; // Check for overlap\n          positions.push(row * BOARD_SIZE + (col + i));\n        }\n      } else {\n        if (row + ship.size > BOARD_SIZE) continue; // Ship goes out of bounds\n        positions = [];\n        for (let i = 0; i < ship.size; i++) {\n          if (board[(row + i) * BOARD_SIZE + col] !== null) return false; // Check for overlap\n          positions.push((row + i) * BOARD_SIZE + col);\n        }\n      }\n\n      // If no overlap, place the ship\n      placed = true;\n    }\n    return positions;\n  };\n  useEffect(() => {\n    const board = Array(100).fill(null); // Start with an empty board\n    let newShips = [...ships];\n    newShips.forEach(ship => {\n      if (!ship.placed) {\n        const positions = placeShip(board, ship);\n        if (positions) {\n          ship.placed = true;\n          ship.positions = positions;\n          positions.forEach(pos => board[pos] = ship.id); // Place the ship on the board\n        }\n      }\n    });\n    setEnemyBoard(board); // Update the enemy board with randomly placed ships\n  }, [setEnemyBoard, ships]);\n  return null; // No UI for this component\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SetEnemyBoard","setEnemyBoard","ships","_s","placeShip","board","ship","BOARD_SIZE","placed","positions","isHorizontal","Math","random","row","floor","col","size","i","push","Array","fill","newShips","forEach","pos","id","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["// SetEnemyBoard.js\nimport { useEffect } from 'react';\n\nconst SetEnemyBoard = ({ setEnemyBoard, ships }) => {\n    // Helper function to randomly place a ship\n    const placeShip = (board, ship) => {\n        const BOARD_SIZE = 10;\n        let placed = false;\n        let positions = [];\n\n        while (!placed) {\n            const isHorizontal = Math.random() > 0.5;\n            const row = Math.floor(Math.random() * BOARD_SIZE);\n            const col = Math.floor(Math.random() * BOARD_SIZE);\n\n            // Check if ship fits in the board\n            if (isHorizontal) {\n                if (col + ship.size > BOARD_SIZE) continue; // Ship goes out of bounds\n                positions = [];\n                for (let i = 0; i < ship.size; i++) {\n                    if (board[row * BOARD_SIZE + (col + i)] !== null) return false; // Check for overlap\n                    positions.push(row * BOARD_SIZE + (col + i));\n                }\n            } else {\n                if (row + ship.size > BOARD_SIZE) continue; // Ship goes out of bounds\n                positions = [];\n                for (let i = 0; i < ship.size; i++) {\n                    if (board[(row + i) * BOARD_SIZE + col] !== null) return false; // Check for overlap\n                    positions.push((row + i) * BOARD_SIZE + col);\n                }\n            }\n\n            // If no overlap, place the ship\n            placed = true;\n        }\n\n        return positions;\n    };\n\n    useEffect(() => {\n        const board = Array(100).fill(null); // Start with an empty board\n        let newShips = [...ships];\n        newShips.forEach(ship => {\n            if (!ship.placed) {\n                const positions = placeShip(board, ship);\n                if (positions) {\n                    ship.placed = true;\n                    ship.positions = positions;\n                    positions.forEach(pos => board[pos] = ship.id); // Place the ship on the board\n                }\n            }\n        });\n\n        setEnemyBoard(board); // Update the enemy board with randomly placed ships\n    }, [setEnemyBoard, ships]);\n\n    return null; // No UI for this component\n};\n\nexport default SetEnemyBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}