{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/components/GameSave/GameContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Initialize context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nconst GameProvider = ({\n  children\n}) => {\n  _s();\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n  const [timer, setTimer] = useState(0);\n\n  // Load game state from localStorage on initial load\n  useEffect(() => {\n    const savedState = localStorage.getItem('battleshipState');\n    if (savedState) {\n      const parsedState = JSON.parse(savedState);\n      setEnemyBoard(parsedState.enemyBoard);\n      setShips(parsedState.ships);\n      setGameStarted(parsedState.gameStarted);\n      setGameOver(parsedState.gameOver);\n      setIsPlayerTurn(parsedState.isPlayerTurn);\n      setPlayerBoard(parsedState.playerBoard);\n      setTimer(parsedState.timer);\n    }\n  }, []);\n\n  // Save state to localStorage whenever the game state changes\n  useEffect(() => {\n    const gameState = {\n      enemyBoard,\n      ships,\n      gameStarted,\n      gameOver,\n      isPlayerTurn,\n      playerBoard,\n      timer\n    };\n    localStorage.setItem('battleshipState', JSON.stringify(gameState));\n  }, [enemyBoard, ships, gameStarted, gameOver, isPlayerTurn, playerBoard, timer]);\n  const resetGame = () => {\n    setGameStarted(false);\n    setGameOver(false);\n    setIsPlayerTurn(true);\n    setPlayerBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips([{\n      id: 'Carrier 5x1',\n      size: 5,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Battleship 4x1',\n      size: 4,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Cruiser 3x1',\n      size: 3,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Submarine 3x1',\n      size: 3,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }, {\n      id: 'Destroyer 2x1',\n      size: 2,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    }]);\n    setTimer(0);\n\n    // Clear localStorage when game resets\n    localStorage.removeItem('battleshipState');\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      enemyBoard,\n      setEnemyBoard,\n      ships,\n      setShips,\n      gameStarted,\n      setGameStarted,\n      gameOver,\n      setGameOver,\n      isPlayerTurn,\n      setIsPlayerTurn,\n      playerBoard,\n      setPlayerBoard,\n      timer,\n      setTimer,\n      resetGame\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(GameProvider, \"WOEftdPbyfQLSHBkGmopL5F/R+M=\");\n_c = GameProvider;\nexport { GameContext, GameProvider };\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","enemyBoard","setEnemyBoard","Array","fill","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","isPlayerTurn","setIsPlayerTurn","playerBoard","setPlayerBoard","timer","setTimer","savedState","localStorage","getItem","parsedState","JSON","parse","gameState","setItem","stringify","resetGame","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/GameSave/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Initialize context\nconst GameContext = createContext();\n\nconst GameProvider = ({ children }) => {\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n    const [ships, setShips] = useState([\n        {id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true},\n        {id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true},\n        {id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n        {id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n        {id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true},\n    ]);\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n    const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n    const [timer, setTimer] = useState(0);\n\n    // Load game state from localStorage on initial load\n    useEffect(() => {\n        const savedState = localStorage.getItem('battleshipState');\n        if (savedState) {\n            const parsedState = JSON.parse(savedState);\n            setEnemyBoard(parsedState.enemyBoard);\n            setShips(parsedState.ships);\n            setGameStarted(parsedState.gameStarted);\n            setGameOver(parsedState.gameOver);\n            setIsPlayerTurn(parsedState.isPlayerTurn);\n            setPlayerBoard(parsedState.playerBoard);\n            setTimer(parsedState.timer);\n        }\n    }, []);\n\n    // Save state to localStorage whenever the game state changes\n    useEffect(() => {\n        const gameState = { enemyBoard, ships, gameStarted, gameOver, isPlayerTurn, playerBoard, timer };\n        localStorage.setItem('battleshipState', JSON.stringify(gameState));\n    }, [enemyBoard, ships, gameStarted, gameOver, isPlayerTurn, playerBoard, timer]);\n\n    const resetGame = () => {\n        setGameStarted(false);\n        setGameOver(false);\n        setIsPlayerTurn(true);\n        setPlayerBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips([\n            {id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true},\n            {id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true},\n            {id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n            {id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true},\n            {id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true},\n        ]);\n        setTimer(0);\n\n        // Clear localStorage when game resets\n        localStorage.removeItem('battleshipState');\n    };\n\n    return (\n        <GameContext.Provider value={{\n            enemyBoard, setEnemyBoard, ships, setShips, gameStarted, setGameStarted,\n            gameOver, setGameOver, isPlayerTurn, setIsPlayerTurn, playerBoard, setPlayerBoard,\n            timer, setTimer, resetGame\n        }}>\n            {children}\n        </GameContext.Provider>\n    );\n};\n\nexport { GameContext, GameProvider };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}