{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n\n  // Initialize enemy board with random ships placement\n  useEffect(() => {\n    if (enemyBoard.every(cell => cell === null)) {\n      // Ensure enemy board is empty before setting\n      const emptyBoard = Array(100).fill(null); // Initialize empty enemy board\n\n      // Function to place ships on the board randomly\n      const placeShipsOnBoard = () => {\n        const newBoard = [...emptyBoard]; // Start with an empty board\n        SHIPS.forEach(ship => {\n          let placed = false;\n          while (!placed) {\n            const {\n              startRow,\n              startCol,\n              direction\n            } = generateRandomPosition(ship.size);\n            if (checkIfPlaceable(newBoard, ship, startRow, startCol, direction)) {\n              // Place ship\n              for (let i = 0; i < ship.size; i++) {\n                let row = startRow;\n                let col = startCol;\n                if (direction === \"horizontal\") col += i;\n                if (direction === \"vertical\") row += i;\n                newBoard[row * BOARD_SIZE + col] = ship.id.charAt(0); // Use ship's first letter\n              }\n              placed = true;\n            }\n          }\n        });\n        setEnemyBoard(newBoard);\n      };\n      placeShipsOnBoard();\n    }\n  }, [enemyBoard]); // Runs only once when enemyBoard is initially empty\n\n  // Helper functions to generate random positions and check placement\n  const generateRandomPosition = size => {\n    const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n    let startRow, startCol;\n    if (direction === \"horizontal\") {\n      startRow = Math.floor(Math.random() * BOARD_SIZE);\n      startCol = Math.floor(Math.random() * (BOARD_SIZE - size));\n    } else {\n      startRow = Math.floor(Math.random() * (BOARD_SIZE - size));\n      startCol = Math.floor(Math.random() * BOARD_SIZE);\n    }\n    return {\n      startRow,\n      startCol,\n      direction\n    };\n  };\n  const checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n    for (let i = 0; i < ship.size; i++) {\n      let row = startRow;\n      let col = startCol;\n      if (direction === \"horizontal\") col += i;\n      if (direction === \"vertical\") row += i;\n      if (board[row * BOARD_SIZE + col] !== null) return false; // Spot already occupied\n    }\n    return true;\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || enemyBoard[index] !== null) return;\n    let newBoard = [...enemyBoard];\n    newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\"; // Mark as hit or miss\n    setEnemyBoard(newBoard);\n\n    // Check for game over\n    if (!newBoard.includes(null)) {\n      setGameOver(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Battleship Game, Normal Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", formatTime(timer)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEnemyBoard(Array(100).fill(null)),\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: enemyBoard.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n            onClick: () => attackEnemy(index),\n            children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"KUdkLJBsimYB10J0TcUrPPE4P0o=\");\n_c = Normal;\nexport default Normal;\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","SetEnemyBoard","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","every","cell","emptyBoard","placeShipsOnBoard","newBoard","SHIPS","forEach","ship","startRow","startCol","direction","generateRandomPosition","checkIfPlaceable","i","row","col","charAt","Math","random","floor","attackEnemy","index","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    // Initialize enemy board with random ships placement\n    useEffect(() => {\n        if (enemyBoard.every(cell => cell === null)) { // Ensure enemy board is empty before setting\n            const emptyBoard = Array(100).fill(null); // Initialize empty enemy board\n\n            // Function to place ships on the board randomly\n            const placeShipsOnBoard = () => {\n                const newBoard = [...emptyBoard]; // Start with an empty board\n                SHIPS.forEach((ship) => {\n                    let placed = false;\n                    while (!placed) {\n                        const { startRow, startCol, direction } = generateRandomPosition(ship.size);\n                        if (checkIfPlaceable(newBoard, ship, startRow, startCol, direction)) {\n                            // Place ship\n                            for (let i = 0; i < ship.size; i++) {\n                                let row = startRow;\n                                let col = startCol;\n                                if (direction === \"horizontal\") col += i;\n                                if (direction === \"vertical\") row += i;\n                                newBoard[row * BOARD_SIZE + col] = ship.id.charAt(0); // Use ship's first letter\n                            }\n                            placed = true;\n                        }\n                    }\n                });\n                setEnemyBoard(newBoard);\n            };\n\n            placeShipsOnBoard();\n        }\n    }, [enemyBoard]); // Runs only once when enemyBoard is initially empty\n\n    // Helper functions to generate random positions and check placement\n    const generateRandomPosition = (size) => {\n        const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n        let startRow, startCol;\n        if (direction === \"horizontal\") {\n            startRow = Math.floor(Math.random() * BOARD_SIZE);\n            startCol = Math.floor(Math.random() * (BOARD_SIZE - size));\n        } else {\n            startRow = Math.floor(Math.random() * (BOARD_SIZE - size));\n            startCol = Math.floor(Math.random() * BOARD_SIZE);\n        }\n        return { startRow, startCol, direction };\n    };\n\n    const checkIfPlaceable = (board, ship, startRow, startCol, direction) => {\n        for (let i = 0; i < ship.size; i++) {\n            let row = startRow;\n            let col = startCol;\n            if (direction === \"horizontal\") col += i;\n            if (direction === \"vertical\") row += i;\n            if (board[row * BOARD_SIZE + col] !== null) return false; // Spot already occupied\n        }\n        return true;\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || enemyBoard[index] !== null) return;\n\n        let newBoard = [...enemyBoard];\n        newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\"; // Mark as hit or miss\n        setEnemyBoard(newBoard);\n\n        // Check for game over\n        if (!newBoard.includes(null)) {\n            setGameOver(true);\n        }\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n            <main className=\"main\">\n                <h1>Battleship Game, Normal Mode</h1>\n                {/* Timer and Reset Button */}\n                <p>Time: {formatTime(timer)}</p>\n                <button onClick={() => setEnemyBoard(Array(100).fill(null))}>Reset Game</button>\n\n                <h2>Your Board</h2>\n                <div className=\"board\"> {/* Render Your Board here */}</div>\n\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"grid-container\">\n                        {enemyBoard.map((cell, index) => (\n                            <div\n                                key={index}\n                                className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                onClick={() => attackEnemy(index)}\n                            >\n                                {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n\nexport default Normal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}