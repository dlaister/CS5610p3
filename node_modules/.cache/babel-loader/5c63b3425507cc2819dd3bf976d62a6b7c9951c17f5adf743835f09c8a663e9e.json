{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n  const placeRandomShip = size => {\n    const orientation = Math.random() > 0.5; // Horizontal or Vertical\n    let positions = [];\n    let startIndex = Math.floor(Math.random() * 100);\n    if (orientation) {\n      // Horizontal placement\n      if (Math.floor(startIndex / BOARD_SIZE) !== Math.floor((startIndex + size - 1) / BOARD_SIZE)) {\n        return null; // Prevent out of bounds horizontal placement\n      }\n      positions = Array.from({\n        length: size\n      }, (_, i) => startIndex + i);\n    } else {\n      // Vertical placement\n      if (startIndex + (size - 1) * BOARD_SIZE >= 100) {\n        return null; // Prevent out of bounds vertical placement\n      }\n      positions = Array.from({\n        length: size\n      }, (_, i) => startIndex + i * BOARD_SIZE);\n    }\n    return positions;\n  };\n\n  // Memoize placeEnemyShips with useCallback to prevent unnecessary re-renders\n  const placeEnemyShips = useCallback(() => {\n    let newBoard = Array(100).fill(null);\n    ships.forEach(ship => {\n      let positions;\n      do {\n        positions = placeRandomShip(ship.size);\n      } while (positions && positions.some(pos => newBoard[pos] !== null));\n      if (positions) {\n        positions.forEach(pos => newBoard[pos] = ship.id);\n      }\n    });\n    setEnemyBoard(newBoard);\n  }, [ships]); // Dependency on ships, so the callback will update when ships change\n\n  // Initialize enemy board with random ships placement\n  useEffect(() => {\n    placeEnemyShips();\n  }, [placeEnemyShips]); // Now we can safely add placeEnemyShips as a dependency\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault(); // Prevent dragging if ship is placed\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...board];\n    const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips(prevShips => prevShips.map(s => s.id === ship.id ? {\n      ...s,\n      placed: true,\n      positions: newShipPositions\n    } : s));\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || enemyBoard[index] !== null) return;\n    let newBoard = [...enemyBoard];\n    if (enemyBoard[index] !== null) {\n      newBoard[index] = \"H\"; // Mark as hit if the square is part of a ship\n    } else {\n      newBoard[index] = \"M\"; // Mark as miss\n    }\n    setEnemyBoard(newBoard);\n\n    // Check for game over\n    if (!newBoard.includes(null)) {\n      setGameOver(true);\n    }\n  };\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips(ships.map(ship => ({\n      ...ship,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    })));\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"restart-button\",\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this), board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Get ship name class if a ship is placed\n              const shipClass = cell ? getShipClass(cell) : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${shipClass}` // Apply the ship class here\n                ,\n                onDrop: e => handleDrop(e, rowIndex * 10 + index),\n                onDragOver: e => e.preventDefault(),\n                children: cell ? \"S\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              const cellClass = cell === 'H' ? 'hit' : cell === 'M' ? 'miss' : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${cellClass}` // Use hit/miss classes\n                ,\n                onClick: () => attackEnemy(rowIndex * 10 + index),\n                children: cell === 'H' ? 'H' : cell === 'M' ? 'M' : ''\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"eeI3dnCeEKG+1r3qUQ0/xyOCug8=\");\n_c = Normal;\nexport default Normal;\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","SetEnemyBoard","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","placeRandomShip","orientation","Math","random","startIndex","floor","from","length","_","i","placeEnemyShips","useCallback","newBoard","forEach","ship","some","pos","handleDragStart","e","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newShipPositions","getShipPositions","alert","prevShips","map","s","newIndex","push","handleRotate","shipId","attackEnemy","includes","resetGame","getShipClass","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","filter","draggable","onDragStart","onDragEnd","disabled","label","rowIndex","slice","cell","shipClass","onDrop","onDragOver","cellClass","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    const placeRandomShip = (size) => {\n        const orientation = Math.random() > 0.5; // Horizontal or Vertical\n        let positions = [];\n        let startIndex = Math.floor(Math.random() * 100);\n\n        if (orientation) {\n            // Horizontal placement\n            if (Math.floor(startIndex / BOARD_SIZE) !== Math.floor((startIndex + size - 1) / BOARD_SIZE)) {\n                return null; // Prevent out of bounds horizontal placement\n            }\n            positions = Array.from({ length: size }, (_, i) => startIndex + i);\n        } else {\n            // Vertical placement\n            if (startIndex + (size - 1) * BOARD_SIZE >= 100) {\n                return null; // Prevent out of bounds vertical placement\n            }\n            positions = Array.from({ length: size }, (_, i) => startIndex + i * BOARD_SIZE);\n        }\n\n        return positions;\n    };\n\n    // Memoize placeEnemyShips with useCallback to prevent unnecessary re-renders\n    const placeEnemyShips = useCallback(() => {\n        let newBoard = Array(100).fill(null);\n        ships.forEach((ship) => {\n            let positions;\n            do {\n                positions = placeRandomShip(ship.size);\n            } while (positions && positions.some((pos) => newBoard[pos] !== null));\n\n            if (positions) {\n                positions.forEach((pos) => (newBoard[pos] = ship.id));\n            }\n        });\n        setEnemyBoard(newBoard);\n    }, [ships]); // Dependency on ships, so the callback will update when ships change\n\n    // Initialize enemy board with random ships placement\n    useEffect(() => {\n        placeEnemyShips();\n    }, [placeEnemyShips]); // Now we can safely add placeEnemyShips as a dependency\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault(); // Prevent dragging if ship is placed\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...board];\n        const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips((prevShips) => prevShips.map(s => s.id === ship.id ? { ...s, placed: true, positions: newShipPositions } : s));\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setBoard(newBoard);\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return { ...ship, isHorizontal: !ship.isHorizontal };\n            }\n            return ship;\n        }));\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || enemyBoard[index] !== null) return;\n\n        let newBoard = [...enemyBoard];\n        if (enemyBoard[index] !== null) {\n            newBoard[index] = \"H\"; // Mark as hit if the square is part of a ship\n        } else {\n            newBoard[index] = \"M\"; // Mark as miss\n        }\n\n        setEnemyBoard(newBoard);\n\n        // Check for game over\n        if (!newBoard.includes(null)) {\n            setGameOver(true);\n        }\n    };\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips(ships.map(ship => ({ ...ship, placed: false, positions: [], isHorizontal: true })));\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button onClick={resetGame} className=\"restart-button\">\n                        Reset Game\n                    </button>\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                    onDragStart={(e) => handleDragStart(e, ship)}\n                                    onDragEnd={handleDragEnd}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    onClick={() => handleRotate(ship.id)}\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    // Get ship name class if a ship is placed\n                                    const shipClass = cell ? getShipClass(cell) : '';\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${shipClass}`} // Apply the ship class here\n                                            onDrop={(e) => handleDrop(e, rowIndex * 10 + index)}\n                                            onDragOver={(e) => e.preventDefault()}\n                                        >\n                                            {cell ? \"S\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    const cellClass = cell === 'H' ? 'hit' : (cell === 'M' ? 'miss' : '');\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${cellClass}`} // Use hit/miss classes\n                                            onClick={() => attackEnemy(rowIndex * 10 + index)}\n                                        >\n                                            {cell === 'H' ? 'H' : (cell === 'M' ? 'M' : '')}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n}\n\nexport default Normal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}