{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n\n  // Memoize the placeRandomShips function to avoid the warning\n  const placeRandomShips = useCallback(() => {\n    const randomBoard = [...enemyBoard]; // Make a copy of the enemy board\n    const availablePositions = getAvailablePositions(randomBoard); // Get available positions for random ships\n\n    ships.forEach(ship => {\n      if (!ship.placed) {\n        const randomPosition = getRandomPosition(availablePositions, ship.size);\n        if (randomPosition) {\n          ship.placed = true;\n          ship.positions = randomPosition;\n          randomPosition.forEach(pos => {\n            randomBoard[pos] = ship.id;\n          });\n        }\n      }\n    });\n    setEnemyBoard(randomBoard);\n  }, [enemyBoard, ships]); // Add dependencies\n\n  // Ensure that the random ships are placed only once when the game starts\n  useEffect(() => {\n    if (!gameStarted) return;\n    if (enemyBoard.every(cell => cell === null)) {\n      placeRandomShips(); // Place random ships when the game starts\n    }\n  }, [gameStarted, enemyBoard, placeRandomShips]); // Include placeRandomShips in dependencies\n\n  // Initialize enemy board with random ships placement\n  useEffect(() => {\n    if (enemyBoard.every(cell => cell === null)) {\n      // Ensure enemy board is empty before setting\n      setEnemyBoard(prev => {\n        return Array(100).fill(null); // Initialize empty enemy board\n      });\n    }\n  }, [enemyBoard]);\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault(); // Prevent dragging if ship is placed\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...board];\n    const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips(prevShips => prevShips.map(s => s.id === ship.id ? {\n      ...s,\n      placed: true,\n      positions: newShipPositions\n    } : s));\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Attack enemy board\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || enemyBoard[index] !== null) return;\n    let newBoard = [...enemyBoard];\n    // Instead of random hit logic, we'll just mark it as a hit (or miss) depending on the actual board state\n    if (enemyBoard[index] !== null) {\n      newBoard[index] = \"H\"; // Mark as hit if the square is part of a ship\n    } else {\n      newBoard[index] = \"M\"; // Mark as miss\n    }\n    setEnemyBoard(newBoard);\n\n    // Check for game over\n    if (!newBoard.includes(null)) {\n      setGameOver(true);\n    }\n  };\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setBoard(Array(100).fill(null));\n    setEnemyBoard(Array(100).fill(null));\n    setShips(ships.map(ship => ({\n      ...ship,\n      placed: false,\n      positions: [],\n      isHorizontal: true\n    })));\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"restart-button\",\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this), board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Get ship name class if a ship is placed\n              const shipClass = cell ? getShipClass(cell) : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${shipClass}` // Apply the ship class here\n                ,\n                onDrop: e => handleDrop(e, rowIndex * 10 + index),\n                onDragOver: e => e.preventDefault(),\n                children: cell ? \"S\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n              onClick: () => attackEnemy(rowIndex * 10 + index),\n              children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"YJccZXpWewHRvS2G+ZU79YADEAU=\");\n_c = Normal;\nexport default Normal;\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","useCallback","Navbar","Footer","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","placeRandomShips","randomBoard","availablePositions","getAvailablePositions","forEach","ship","randomPosition","getRandomPosition","pos","every","cell","prev","handleDragStart","e","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","some","alert","prevShips","map","s","startIndex","i","newIndex","Math","floor","push","handleRotate","shipId","attackEnemy","includes","resetGame","getShipClass","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","filter","draggable","onDragStart","onDragEnd","disabled","label","from","length","_","rowIndex","slice","shipClass","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    // Memoize the placeRandomShips function to avoid the warning\n    const placeRandomShips = useCallback(() => {\n        const randomBoard = [...enemyBoard]; // Make a copy of the enemy board\n        const availablePositions = getAvailablePositions(randomBoard); // Get available positions for random ships\n\n        ships.forEach(ship => {\n            if (!ship.placed) {\n                const randomPosition = getRandomPosition(availablePositions, ship.size);\n                if (randomPosition) {\n                    ship.placed = true;\n                    ship.positions = randomPosition;\n                    randomPosition.forEach(pos => {\n                        randomBoard[pos] = ship.id;\n                    });\n                }\n            }\n        });\n\n        setEnemyBoard(randomBoard);\n    }, [enemyBoard, ships]); // Add dependencies\n\n    // Ensure that the random ships are placed only once when the game starts\n    useEffect(() => {\n        if (!gameStarted) return;\n        if (enemyBoard.every(cell => cell === null)) {\n            placeRandomShips(); // Place random ships when the game starts\n        }\n    }, [gameStarted, enemyBoard, placeRandomShips]); // Include placeRandomShips in dependencies\n\n    // Initialize enemy board with random ships placement\n    useEffect(() => {\n        if (enemyBoard.every(cell => cell === null)) { // Ensure enemy board is empty before setting\n            setEnemyBoard(prev => {\n                return Array(100).fill(null); // Initialize empty enemy board\n            });\n        }\n    }, [enemyBoard]);\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault(); // Prevent dragging if ship is placed\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...board];\n        const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips((prevShips) => prevShips.map(s => s.id === ship.id ? { ...s, placed: true, positions: newShipPositions } : s));\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setBoard(newBoard);\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return { ...ship, isHorizontal: !ship.isHorizontal };\n            }\n            return ship;\n        }));\n    };\n\n    // Attack enemy board\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || enemyBoard[index] !== null) return;\n\n        let newBoard = [...enemyBoard];\n        // Instead of random hit logic, we'll just mark it as a hit (or miss) depending on the actual board state\n        if (enemyBoard[index] !== null) {\n            newBoard[index] = \"H\"; // Mark as hit if the square is part of a ship\n        } else {\n            newBoard[index] = \"M\"; // Mark as miss\n        }\n\n        setEnemyBoard(newBoard);\n\n        // Check for game over\n        if (!newBoard.includes(null)) {\n            setGameOver(true);\n        }\n    };\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setBoard(Array(100).fill(null));\n        setEnemyBoard(Array(100).fill(null));\n        setShips(ships.map(ship => ({ ...ship, placed: false, positions: [], isHorizontal: true })));\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button onClick={resetGame} className=\"restart-button\">\n                        Reset Game\n                    </button>\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                    onDragStart={(e) => handleDragStart(e, ship)}\n                                    onDragEnd={handleDragEnd}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    onClick={() => handleRotate(ship.id)}\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    // Get ship name class if a ship is placed\n                                    const shipClass = cell ? getShipClass(cell) : '';\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${shipClass}`} // Apply the ship class here\n                                            onDrop={(e) => handleDrop(e, rowIndex * 10 + index)}\n                                            onDragOver={(e) => e.preventDefault()}\n                                        >\n                                            {cell ? \"S\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => (\n                                    <div\n                                        key={index}\n                                        className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                        onClick={() => attackEnemy(rowIndex * 10 + index)}\n                                    >\n                                        {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Game Over Notification */}\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Normal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}