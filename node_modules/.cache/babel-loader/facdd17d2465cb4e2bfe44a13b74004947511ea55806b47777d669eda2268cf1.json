{"ast":null,"code":"var _s = $RefreshSig$();\n// SetEnemyBoard.js\nimport { useEffect } from 'react';\nconst SetEnemyBoard = ({\n  ships,\n  setEnemyBoard\n}) => {\n  _s();\n  // Function to generate random placements for ships\n  const placeShipRandomly = shipSize => {\n    let placed = false;\n    let positions = [];\n    while (!placed) {\n      // Random starting point\n      const startIndex = Math.floor(Math.random() * 100);\n      const isHorizontal = Math.random() > 0.5;\n      positions = [];\n      for (let i = 0; i < shipSize; i++) {\n        let newIndex;\n        if (isHorizontal) {\n          newIndex = startIndex + i;\n          if (Math.floor(newIndex / 10) !== Math.floor((startIndex + i) / 10)) {\n            break; // Prevent wrapping around row\n          }\n        } else {\n          newIndex = startIndex + i * 10;\n        }\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          break; // Prevent out-of-bounds placement\n        }\n      }\n\n      // Ensure no overlap with existing ships\n      if (positions.length === shipSize && !positions.some(pos => setEnemyBoard[pos] !== null)) {\n        placed = true;\n      }\n    }\n    return positions;\n  };\n  useEffect(() => {\n    const newEnemyBoard = Array(100).fill(null);\n    ships.forEach(ship => {\n      if (!ship.placed) {\n        const positions = placeShipRandomly(ship.size);\n        ship.positions = positions;\n        ship.placed = true;\n        positions.forEach(pos => {\n          newEnemyBoard[pos] = ship.id;\n        });\n      }\n    });\n    setEnemyBoard(newEnemyBoard);\n  }, [ships, setEnemyBoard]);\n  return null; // No visual component rendered\n};\n_s(SetEnemyBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetEnemyBoard;\nexport default SetEnemyBoard;\nvar _c;\n$RefreshReg$(_c, \"SetEnemyBoard\");","map":{"version":3,"names":["useEffect","SetEnemyBoard","ships","setEnemyBoard","_s","placeShipRandomly","shipSize","placed","positions","startIndex","Math","floor","random","isHorizontal","i","newIndex","push","length","some","pos","newEnemyBoard","Array","fill","forEach","ship","size","id","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/SetEnemyBoard.js"],"sourcesContent":["// SetEnemyBoard.js\nimport { useEffect } from 'react';\n\nconst SetEnemyBoard = ({ ships, setEnemyBoard }) => {\n    // Function to generate random placements for ships\n    const placeShipRandomly = (shipSize) => {\n        let placed = false;\n        let positions = [];\n\n        while (!placed) {\n            // Random starting point\n            const startIndex = Math.floor(Math.random() * 100);\n            const isHorizontal = Math.random() > 0.5;\n            positions = [];\n\n            for (let i = 0; i < shipSize; i++) {\n                let newIndex;\n                if (isHorizontal) {\n                    newIndex = startIndex + i;\n                    if (Math.floor(newIndex / 10) !== Math.floor((startIndex + i) / 10)) {\n                        break; // Prevent wrapping around row\n                    }\n                } else {\n                    newIndex = startIndex + i * 10;\n                }\n\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    break; // Prevent out-of-bounds placement\n                }\n            }\n\n            // Ensure no overlap with existing ships\n            if (positions.length === shipSize && !positions.some((pos) => setEnemyBoard[pos] !== null)) {\n                placed = true;\n            }\n        }\n\n        return positions;\n    };\n\n    useEffect(() => {\n        const newEnemyBoard = Array(100).fill(null);\n\n        ships.forEach((ship) => {\n            if (!ship.placed) {\n                const positions = placeShipRandomly(ship.size);\n                ship.positions = positions;\n                ship.placed = true;\n\n                positions.forEach((pos) => {\n                    newEnemyBoard[pos] = ship.id;\n                });\n            }\n        });\n\n        setEnemyBoard(newEnemyBoard);\n    }, [ships, setEnemyBoard]);\n\n    return null; // No visual component rendered\n};\n\nexport default SetEnemyBoard;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AAEjC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD;EACA,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;IACpC,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAIC,SAAS,GAAG,EAAE;IAElB,OAAO,CAACD,MAAM,EAAE;MACZ;MACA,MAAME,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MAClD,MAAMC,YAAY,GAAGH,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;MACxCJ,SAAS,GAAG,EAAE;MAEd,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,EAAEQ,CAAC,EAAE,EAAE;QAC/B,IAAIC,QAAQ;QACZ,IAAIF,YAAY,EAAE;UACdE,QAAQ,GAAGN,UAAU,GAAGK,CAAC;UACzB,IAAIJ,IAAI,CAACC,KAAK,CAACI,QAAQ,GAAG,EAAE,CAAC,KAAKL,IAAI,CAACC,KAAK,CAAC,CAACF,UAAU,GAAGK,CAAC,IAAI,EAAE,CAAC,EAAE;YACjE,MAAM,CAAC;UACX;QACJ,CAAC,MAAM;UACHC,QAAQ,GAAGN,UAAU,GAAGK,CAAC,GAAG,EAAE;QAClC;QAEA,IAAIC,QAAQ,GAAG,GAAG,EAAE;UAChBP,SAAS,CAACQ,IAAI,CAACD,QAAQ,CAAC;QAC5B,CAAC,MAAM;UACH,MAAM,CAAC;QACX;MACJ;;MAEA;MACA,IAAIP,SAAS,CAACS,MAAM,KAAKX,QAAQ,IAAI,CAACE,SAAS,CAACU,IAAI,CAAEC,GAAG,IAAKhB,aAAa,CAACgB,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;QACxFZ,MAAM,GAAG,IAAI;MACjB;IACJ;IAEA,OAAOC,SAAS;EACpB,CAAC;EAEDR,SAAS,CAAC,MAAM;IACZ,MAAMoB,aAAa,GAAGC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAE3CpB,KAAK,CAACqB,OAAO,CAAEC,IAAI,IAAK;MACpB,IAAI,CAACA,IAAI,CAACjB,MAAM,EAAE;QACd,MAAMC,SAAS,GAAGH,iBAAiB,CAACmB,IAAI,CAACC,IAAI,CAAC;QAC9CD,IAAI,CAAChB,SAAS,GAAGA,SAAS;QAC1BgB,IAAI,CAACjB,MAAM,GAAG,IAAI;QAElBC,SAAS,CAACe,OAAO,CAAEJ,GAAG,IAAK;UACvBC,aAAa,CAACD,GAAG,CAAC,GAAGK,IAAI,CAACE,EAAE;QAChC,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAEFvB,aAAa,CAACiB,aAAa,CAAC;EAChC,CAAC,EAAE,CAAClB,KAAK,EAAEC,aAAa,CAAC,CAAC;EAE1B,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACC,EAAA,CA1DIH,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AA4DnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}