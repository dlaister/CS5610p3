{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect } from 'react';\nimport { GameContext } from './GameContext'; // Import your GameContext\n\nconst GameSaveState = () => {\n  _s();\n  const {\n    enemyBoard,\n    setEnemyBoard,\n    ships,\n    setShips,\n    gameStarted,\n    setGameStarted,\n    gameOver,\n    setGameOver,\n    isPlayerTurn,\n    setIsPlayerTurn,\n    playerBoard,\n    setPlayerBoard,\n    timer,\n    setTimer\n  } = useContext(GameContext); // Access your game state from context\n\n  useEffect(() => {\n    // Check localStorage for saved game state when the app first opens\n    const savedGameState = JSON.parse(localStorage.getItem('battleshipGameState'));\n    if (savedGameState) {\n      setEnemyBoard(savedGameState.enemyBoard);\n      setShips(savedGameState.ships);\n      setGameStarted(savedGameState.gameStarted);\n      setGameOver(savedGameState.gameOver);\n      setIsPlayerTurn(savedGameState.isPlayerTurn);\n      setPlayerBoard(savedGameState.playerBoard);\n      setTimer(savedGameState.timer);\n    }\n  }, []);\n  useEffect(() => {\n    // Update localStorage after every state change\n    const gameState = {\n      enemyBoard,\n      ships,\n      gameStarted,\n      gameOver,\n      isPlayerTurn,\n      playerBoard,\n      timer\n    };\n    localStorage.setItem('battleshipGameState', JSON.stringify(gameState));\n  }, [enemyBoard, ships, gameStarted, gameOver, isPlayerTurn, playerBoard, timer]);\n  const resetGameState = () => {\n    // Reset game state and clear localStorage when the game is over or reset\n    localStorage.removeItem('battleshipGameState');\n  };\n  return {\n    resetGameState\n  };\n};\n_s(GameSaveState, \"GOyt6SZAFEZbtfmZOTQ/KCTfhU0=\");\n_c = GameSaveState;\nexport default GameSaveState;\nvar _c;\n$RefreshReg$(_c, \"GameSaveState\");","map":{"version":3,"names":["useContext","useEffect","GameContext","GameSaveState","_s","enemyBoard","setEnemyBoard","ships","setShips","gameStarted","setGameStarted","gameOver","setGameOver","isPlayerTurn","setIsPlayerTurn","playerBoard","setPlayerBoard","timer","setTimer","savedGameState","JSON","parse","localStorage","getItem","gameState","setItem","stringify","resetGameState","removeItem","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/components/GameSave/GameSaveState.js"],"sourcesContent":["import { useContext, useEffect } from 'react';\nimport { GameContext } from './GameContext'; // Import your GameContext\n\nconst GameSaveState = () => {\n    const {\n        enemyBoard, setEnemyBoard,\n        ships, setShips,\n        gameStarted, setGameStarted,\n        gameOver, setGameOver,\n        isPlayerTurn, setIsPlayerTurn,\n        playerBoard, setPlayerBoard,\n        timer, setTimer\n    } = useContext(GameContext); // Access your game state from context\n\n    useEffect(() => {\n        // Check localStorage for saved game state when the app first opens\n        const savedGameState = JSON.parse(localStorage.getItem('battleshipGameState'));\n\n        if (savedGameState) {\n            setEnemyBoard(savedGameState.enemyBoard);\n            setShips(savedGameState.ships);\n            setGameStarted(savedGameState.gameStarted);\n            setGameOver(savedGameState.gameOver);\n            setIsPlayerTurn(savedGameState.isPlayerTurn);\n            setPlayerBoard(savedGameState.playerBoard);\n            setTimer(savedGameState.timer);\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update localStorage after every state change\n        const gameState = {\n            enemyBoard,\n            ships,\n            gameStarted,\n            gameOver,\n            isPlayerTurn,\n            playerBoard,\n            timer\n        };\n        localStorage.setItem('battleshipGameState', JSON.stringify(gameState));\n    }, [enemyBoard, ships, gameStarted, gameOver, isPlayerTurn, playerBoard, timer]);\n\n    const resetGameState = () => {\n        // Reset game state and clear localStorage when the game is over or reset\n        localStorage.removeItem('battleshipGameState');\n    };\n\n    return {\n        resetGameState,\n    };\n};\n\nexport default GameSaveState;\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,eAAe,CAAC,CAAC;;AAE7C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IACFC,UAAU;IAAEC,aAAa;IACzBC,KAAK;IAAEC,QAAQ;IACfC,WAAW;IAAEC,cAAc;IAC3BC,QAAQ;IAAEC,WAAW;IACrBC,YAAY;IAAEC,eAAe;IAC7BC,WAAW;IAAEC,cAAc;IAC3BC,KAAK;IAAEC;EACX,CAAC,GAAGlB,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC;;EAE7BD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMkB,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAE9E,IAAIJ,cAAc,EAAE;MAChBb,aAAa,CAACa,cAAc,CAACd,UAAU,CAAC;MACxCG,QAAQ,CAACW,cAAc,CAACZ,KAAK,CAAC;MAC9BG,cAAc,CAACS,cAAc,CAACV,WAAW,CAAC;MAC1CG,WAAW,CAACO,cAAc,CAACR,QAAQ,CAAC;MACpCG,eAAe,CAACK,cAAc,CAACN,YAAY,CAAC;MAC5CG,cAAc,CAACG,cAAc,CAACJ,WAAW,CAAC;MAC1CG,QAAQ,CAACC,cAAc,CAACF,KAAK,CAAC;IAClC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMuB,SAAS,GAAG;MACdnB,UAAU;MACVE,KAAK;MACLE,WAAW;MACXE,QAAQ;MACRE,YAAY;MACZE,WAAW;MACXE;IACJ,CAAC;IACDK,YAAY,CAACG,OAAO,CAAC,qBAAqB,EAAEL,IAAI,CAACM,SAAS,CAACF,SAAS,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACnB,UAAU,EAAEE,KAAK,EAAEE,WAAW,EAAEE,QAAQ,EAAEE,YAAY,EAAEE,WAAW,EAAEE,KAAK,CAAC,CAAC;EAEhF,MAAMU,cAAc,GAAGA,CAAA,KAAM;IACzB;IACAL,YAAY,CAACM,UAAU,CAAC,qBAAqB,CAAC;EAClD,CAAC;EAED,OAAO;IACHD;EACJ,CAAC;AACL,CAAC;AAACvB,EAAA,CAhDID,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAkDnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}