{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Normal() {\n  _s();\n  const BOARD_SIZE = 10;\n\n  // Board state (10x10 grid represented as a 1D array)\n  const [board, setBoard] = useState(Array(100).fill(null));\n  const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n  // Ship state\n  const [ships, setShips] = useState([{\n    id: 'Carrier 5x1',\n    size: 5,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Battleship 4x1',\n    size: 4,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Cruiser 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Submarine 3x1',\n    size: 3,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }, {\n    id: 'Destroyer 2x1',\n    size: 2,\n    placed: false,\n    positions: [],\n    isHorizontal: true\n  }]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n  const [timer, setTimer] = useState(0);\n\n  // Timer logic (start on first move, stop when game is over)\n  useEffect(() => {\n    let interval;\n    if (gameStarted && !gameOver) {\n      interval = setInterval(() => setTimer(t => t + 1), 1000); // Update timer every second\n    }\n    return () => clearInterval(interval);\n  }, [gameStarted, gameOver]);\n\n  // Use Date object to format time as hh:mm:ss\n  const formatTime = seconds => {\n    const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n    return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n  };\n  const checkGameOver = board => {\n    return board.every(cell => cell === null || cell === \"H\" || cell === \"M\");\n  };\n\n  // Handle ship drag start\n  const handleDragStart = (e, ship) => {\n    if (ship.placed) {\n      e.preventDefault(); // Prevent dragging if ship is placed\n    } else {\n      e.dataTransfer.setData('ship', JSON.stringify(ship));\n      e.target.style.opacity = '0.5'; // Makes dragging effect visible\n    }\n  };\n  const handleDragEnd = e => {\n    e.target.style.opacity = '1'; // Restore opacity after dragging\n  };\n\n  // Handle dropping a ship onto the board\n  const handleDrop = (e, index) => {\n    e.preventDefault();\n    const ship = JSON.parse(e.dataTransfer.getData('ship'));\n    if (ship.placed) return; // Prevent re-placing the same ship\n\n    const newBoard = [...board];\n    const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n    if (!newShipPositions) return; // Prevent invalid placement\n\n    // Prevent ship overlap\n    if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n      alert(\"Ships cannot overlap!\");\n      return;\n    }\n\n    // Place ship\n    ship.placed = true;\n    ship.positions = newShipPositions;\n    setShips(prevShips => prevShips.map(s => s.id === ship.id ? {\n      ...s,\n      placed: true,\n      positions: newShipPositions\n    } : s));\n    newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n    setBoard(newBoard);\n  };\n\n  // Get ship positions based on orientation (horizontal/vertical)\n  const getShipPositions = (startIndex, size, isHorizontal) => {\n    const positions = [];\n    for (let i = 0; i < size; i++) {\n      let newIndex;\n      if (isHorizontal) {\n        newIndex = startIndex + i;\n        if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      } else {\n        newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n        if (newIndex < 100) {\n          positions.push(newIndex);\n        } else {\n          return null; // Prevent wrapping around\n        }\n      }\n    }\n    return positions;\n  };\n\n  // Rotate ship (toggle horizontal/vertical)\n  const handleRotate = shipId => {\n    setShips(prevShips => prevShips.map(ship => {\n      if (ship.id === shipId && !ship.placed) {\n        return {\n          ...ship,\n          isHorizontal: !ship.isHorizontal\n        };\n      }\n      return ship;\n    }));\n  };\n\n  // Attack enemy board\n  // const attackEnemy = (index) => {\n  //     if (!gameStarted) setGameStarted(true);\n  //     if (gameOver || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n  //\n  //     let newBoard = [...enemyBoard];\n  //     newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n  //     setEnemyBoard(newBoard);\n  //\n  //     if (checkGameOver(newBoard)) {\n  //         setGameOver(true);\n  //     }\n  // };\n  const attackEnemy = index => {\n    if (!gameStarted) setGameStarted(true);\n    if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n    let newBoard = [...enemyBoard];\n    newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n    setEnemyBoard(newBoard);\n    if (checkGameOver(newBoard)) {\n      setGameOver(true);\n      return;\n    }\n    setIsPlayerTurn(false); // Switch to enemy turn\n    setTimeout(enemyAttack, 1000); // Delay enemy attack slightly for realism\n  };\n  const [resetTrigger, setResetTrigger] = useState(false);\n\n  // Reset game (including timer)\n  const resetGame = () => {\n    setGameStarted(false);\n    setTimer(0);\n    setGameOver(false);\n    setResetTrigger(prev => !prev); // Toggle the trigger to signal SetEnemyBoard to reset\n  };\n  const getShipClass = shipId => {\n    return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Battleship Game, Normal Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timerColor\",\n            children: formatTime(timer)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"restart-button\",\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-description\",\n        children: \"Bellow, you can set your board and play against the enemy AI!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Ships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), ships.some(ship => !ship.placed) ? ships.filter(ship => !ship.placed).map(ship => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `ship-container ${getShipClass(ship.id)}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ship\",\n            draggable: !ship.placed,\n            onDragStart: e => handleDragStart(e, ship),\n            onDragEnd: handleDragEnd,\n            children: ship.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(ship.id),\n            disabled: ship.placed,\n            className: \"ship-button\",\n            children: ship.isHorizontal ? 'Vertical' : 'Horizontal'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 33\n          }, this)]\n        }, ship.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"all-placed-message\",\n          children: \"All ships are placed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), \" \", ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 33\n            }, this), board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n              // Get ship name class if a ship is placed\n              const shipClass = cell ? getShipClass(cell) : '';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `cell ${shipClass}` // Apply the ship class here\n                ,\n                onDrop: e => handleDrop(e, rowIndex * 10 + index),\n                onDragOver: e => e.preventDefault(),\n                children: cell ? \"S\" : \"\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 41\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enemy Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-headers\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-cell\",\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          children: Array.from({\n            length: 10\n          }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-cell\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this), enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`,\n              onClick: () => attackEnemy(rowIndex * 10 + index),\n              children: cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 37\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SetEnemyBoard, {\n        setEnemyBoard: setEnemyBoard,\n        resetTrigger: resetTrigger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"game-over\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n}\n_s(Normal, \"DpApdl5MM6RXC917zEFSWYmr3zg=\");\n_c = Normal;\nexport default Normal;\n\n// TODO -- set board so that player can attack the enemy board only on their turn\n// TODO -- enemy logic to attack player\nvar _c;\n$RefreshReg$(_c, \"Normal\");","map":{"version":3,"names":["useState","useEffect","Navbar","Footer","SetEnemyBoard","jsxDEV","_jsxDEV","Normal","_s","BOARD_SIZE","board","setBoard","Array","fill","enemyBoard","setEnemyBoard","ships","setShips","id","size","placed","positions","isHorizontal","gameStarted","setGameStarted","gameOver","setGameOver","isPlayerTurn","setIsPlayerTurn","playerBoard","setPlayerBoard","timer","setTimer","interval","setInterval","t","clearInterval","formatTime","seconds","date","Date","toISOString","substr","checkGameOver","every","cell","handleDragStart","e","ship","preventDefault","dataTransfer","setData","JSON","stringify","target","style","opacity","handleDragEnd","handleDrop","index","parse","getData","newBoard","newShipPositions","getShipPositions","some","pos","alert","prevShips","map","s","forEach","startIndex","i","newIndex","Math","floor","push","handleRotate","shipId","attackEnemy","setTimeout","enemyAttack","resetTrigger","setResetTrigger","resetGame","prev","getShipClass","split","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","filter","draggable","onDragStart","onDragEnd","disabled","label","from","length","_","rowIndex","slice","shipClass","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610p2/src/pages/game/Normal.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Navbar from '../../components/Navbar';\nimport Footer from '../../components/Footer';\nimport SetEnemyBoard from '../../components/SetEnemyBoard';\nimport '../../styles/global.css';\nimport '../../styles/normal.css';\n\nfunction Normal() {\n    const BOARD_SIZE = 10;\n\n    // Board state (10x10 grid represented as a 1D array)\n    const [board, setBoard] = useState(Array(100).fill(null));\n    const [enemyBoard, setEnemyBoard] = useState(Array(100).fill(null));\n\n    // Ship state\n    const [ships, setShips] = useState([\n        { id: 'Carrier 5x1', size: 5, placed: false, positions: [], isHorizontal: true },\n        { id: 'Battleship 4x1', size: 4, placed: false, positions: [], isHorizontal: true },\n        { id: 'Cruiser 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Submarine 3x1', size: 3, placed: false, positions: [], isHorizontal: true },\n        { id: 'Destroyer 2x1', size: 2, placed: false, positions: [], isHorizontal: true },\n    ]);\n\n    // Game state\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n    const [playerBoard, setPlayerBoard] = useState(Array(100).fill(null));\n\n    const [timer, setTimer] = useState(0);\n\n    // Timer logic (start on first move, stop when game is over)\n    useEffect(() => {\n        let interval;\n        if (gameStarted && !gameOver) {\n            interval = setInterval(() => setTimer((t) => t + 1), 1000); // Update timer every second\n        }\n        return () => clearInterval(interval);\n    }, [gameStarted, gameOver]);\n\n    // Use Date object to format time as hh:mm:ss\n    const formatTime = (seconds) => {\n        const date = new Date(seconds * 1000); // Convert seconds to milliseconds\n        return date.toISOString().substr(11, 8); // Extract hh:mm:ss part from the ISO string\n    };\n\n    const checkGameOver = (board) => {\n        return board.every((cell) => cell === null || cell === \"H\" || cell === \"M\");\n    };\n\n    // Handle ship drag start\n    const handleDragStart = (e, ship) => {\n        if (ship.placed) {\n            e.preventDefault(); // Prevent dragging if ship is placed\n        } else {\n            e.dataTransfer.setData('ship', JSON.stringify(ship));\n            e.target.style.opacity = '0.5'; // Makes dragging effect visible\n        }\n    };\n\n    const handleDragEnd = (e) => {\n        e.target.style.opacity = '1'; // Restore opacity after dragging\n    };\n\n    // Handle dropping a ship onto the board\n    const handleDrop = (e, index) => {\n        e.preventDefault();\n        const ship = JSON.parse(e.dataTransfer.getData('ship'));\n\n        if (ship.placed) return; // Prevent re-placing the same ship\n\n        const newBoard = [...board];\n        const newShipPositions = getShipPositions(index, ship.size, ship.isHorizontal);\n\n        if (!newShipPositions) return; // Prevent invalid placement\n\n        // Prevent ship overlap\n        if (newShipPositions.some(pos => newBoard[pos] !== null)) {\n            alert(\"Ships cannot overlap!\");\n            return;\n        }\n\n        // Place ship\n        ship.placed = true;\n        ship.positions = newShipPositions;\n        setShips((prevShips) => prevShips.map(s => s.id === ship.id ? { ...s, placed: true, positions: newShipPositions } : s));\n\n        newShipPositions.forEach(pos => newBoard[pos] = ship.id);\n        setBoard(newBoard);\n    };\n\n    // Get ship positions based on orientation (horizontal/vertical)\n    const getShipPositions = (startIndex, size, isHorizontal) => {\n        const positions = [];\n        for (let i = 0; i < size; i++) {\n            let newIndex;\n            if (isHorizontal) {\n                newIndex = startIndex + i;\n                if (newIndex < 100 && Math.floor(newIndex / BOARD_SIZE) === Math.floor(startIndex / BOARD_SIZE)) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            } else {\n                newIndex = startIndex + i * BOARD_SIZE; // Vertical placement\n                if (newIndex < 100) {\n                    positions.push(newIndex);\n                } else {\n                    return null; // Prevent wrapping around\n                }\n            }\n        }\n        return positions;\n    };\n\n    // Rotate ship (toggle horizontal/vertical)\n    const handleRotate = (shipId) => {\n        setShips((prevShips) => prevShips.map(ship => {\n            if (ship.id === shipId && !ship.placed) {\n                return { ...ship, isHorizontal: !ship.isHorizontal };\n            }\n            return ship;\n        }));\n    };\n\n    // Attack enemy board\n    // const attackEnemy = (index) => {\n    //     if (!gameStarted) setGameStarted(true);\n    //     if (gameOver || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n    //\n    //     let newBoard = [...enemyBoard];\n    //     newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n    //     setEnemyBoard(newBoard);\n    //\n    //     if (checkGameOver(newBoard)) {\n    //         setGameOver(true);\n    //     }\n    // };\n    const attackEnemy = (index) => {\n        if (!gameStarted) setGameStarted(true);\n        if (gameOver || !isPlayerTurn || enemyBoard[index] === \"H\" || enemyBoard[index] === \"M\") return;\n\n        let newBoard = [...enemyBoard];\n        newBoard[index] = enemyBoard[index] !== null ? \"H\" : \"M\";\n        setEnemyBoard(newBoard);\n\n        if (checkGameOver(newBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        setIsPlayerTurn(false); // Switch to enemy turn\n        setTimeout(enemyAttack, 1000); // Delay enemy attack slightly for realism\n    };\n\n\n\n\n    const [resetTrigger, setResetTrigger] = useState(false);\n\n    // Reset game (including timer)\n    const resetGame = () => {\n        setGameStarted(false);\n        setTimer(0);\n        setGameOver(false);\n        setResetTrigger(prev => !prev); // Toggle the trigger to signal SetEnemyBoard to reset\n    };\n\n    const getShipClass = (shipId) => {\n        return shipId.split(\" \")[0].toLowerCase(); // Extract first word & lowercase\n    };\n\n    return (\n        <div className=\"play\">\n            <Navbar />\n\n            <main className=\"main\">\n                <header>\n                    <h1>Battleship Game, Normal Mode</h1>\n                </header>\n\n                {/* Timer and Reset Button */}\n                <div className=\"top-controls\">\n                    <p>\n                        <span>Time:</span>\n                        <span className=\"timerColor\">{formatTime(timer)}</span>\n                    </p>\n\n                    <button onClick={resetGame} className=\"restart-button\">\n                        Reset Game\n                    </button>\n                </div>\n\n                <div className=\"board-description\">\n                    Bellow, you can set your board and play against the enemy AI!\n                </div>\n\n                {/* Ship Selection & Drag Area */}\n                <div className=\"ship-selection\">\n                    <h2>Available Ships</h2>\n                    {ships.some(ship => !ship.placed) ? (\n                        ships.filter(ship => !ship.placed).map((ship) => (\n                            <div\n                                key={ship.id}\n                                className={`ship-container ${getShipClass(ship.id)}`}\n                            >\n                                {/* Ship name */}\n                                <div\n                                    className=\"ship\"\n                                    draggable={!ship.placed}\n                                    onDragStart={(e) => handleDragStart(e, ship)}\n                                    onDragEnd={handleDragEnd}\n                                >\n                                    {ship.id}\n                                </div>\n                                {/* Rotate button */}\n                                <button\n                                    onClick={() => handleRotate(ship.id)}\n                                    disabled={ship.placed}\n                                    className=\"ship-button\"\n                                >\n                                    {ship.isHorizontal ? 'Vertical' : 'Horizontal'}\n                                </button>\n                            </div>\n                        ))\n                    ) : (\n                        <p className=\"all-placed-message\">All ships are placed!</p>\n                    )}\n                </div>\n\n                {/* Your Board */}\n                <h2>Your Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        {/* Column headers A-J */}\n                        <div className=\"header-cell\"></div> {/* Empty corner cell */}\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n                    <div className=\"grid-container\">\n                        {/* Row headers 1-10 */}\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {board.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => {\n                                    // Get ship name class if a ship is placed\n                                    const shipClass = cell ? getShipClass(cell) : '';\n\n                                    return (\n                                        <div\n                                            key={index}\n                                            className={`cell ${shipClass}`} // Apply the ship class here\n                                            onDrop={(e) => handleDrop(e, rowIndex * 10 + index)}\n                                            onDragOver={(e) => e.preventDefault()}\n                                        >\n                                            {cell ? \"S\" : \"\"}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Enemy Board */}\n                <h2>Enemy Board</h2>\n                <div className=\"board\">\n                    <div className=\"board-headers\">\n                        <div className=\"header-cell\"></div>\n                        {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'].map((label) => (\n                            <div key={label} className=\"header-cell\">{label}</div>\n                        ))}\n                    </div>\n\n                    <div className=\"grid-container\">\n                        {Array.from({ length: 10 }).map((_, rowIndex) => (\n                            <div key={rowIndex} className=\"board-row\">\n                                <div className=\"header-cell\">{rowIndex + 1}</div>\n                                {enemyBoard.slice(rowIndex * 10, (rowIndex + 1) * 10).map((cell, index) => (\n                                    <div\n                                        key={index}\n                                        className={`cell ${cell === \"H\" ? 'hit' : cell === \"M\" ? 'miss' : ''}`}\n                                        onClick={() => attackEnemy(rowIndex * 10 + index)}\n                                    >\n                                        {cell === \"H\" ? \"✔\" : cell === \"M\" ? \"✖\" : \"\"}\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                <SetEnemyBoard setEnemyBoard={setEnemyBoard} resetTrigger={resetTrigger} />\n\n                {gameOver && <p className=\"game-over\">Game Over!</p>}\n            </main>\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default Normal;\n\n// TODO -- set board so that player can attack the enemy board only on their turn\n// TODO -- enemy logic to attack player\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}